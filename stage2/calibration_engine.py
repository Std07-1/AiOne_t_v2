"""calibration_engine.py"""

import asyncio
import json
import logging
import os
import numpy as np
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Tuple
import optuna
from optuna.samplers import TPESampler
from .calibration.indicators import calculate_indicators
from .calibration.backtest import run_backtest, calculate_summary
from .calibration.calibration import (
    objective,
    calculate_sharpe,
    calculate_sortino,
    safe_metric_value,
)
from .calibration.data import load_data
from .calibration.utils import unify_stage2_params

from stage2.config import STAGE2_CONFIG

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
from .calibration.core import logger  # –ó–∞–º—ñ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è


class CalibrationEngine:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –¥–≤–∏–≥—É–Ω –¥–ª—è –∫–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è —Ç–∞ –±–µ–∫—Ç–µ—Å—Ç–∏–Ω–≥—É —Ç–æ—Ä–≥–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏.
    –û–ø—Ç–∏–º—ñ–∑—É—î –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∞–∫—Ç–∏–≤—É —Ç–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º—É –æ–∫—Ä–µ–º–æ.
    """

    def __init__(
        self,
        fetcher: Any,
        redis_client,
        ram_buffer,  # –û–±'—î–¥–Ω–∞–Ω–∏–π –±—É—Ñ–µ—Ä –¥–ª—è –¥–∞–Ω–∏—Ö
        interval: str = "1m",
        min_bars: int = 30,
        metric: str = "profit_factor",
        calib_queue: Optional[Any] = None,
    ):
        self.fetcher = fetcher
        self.interval = interval
        self.min_bars = 500 if interval == "1m" else min_bars
        self.redis = redis_client
        self.ram_buffer = ram_buffer
        self.metric = metric
        self.calibration_results = {}
        self.symbol_seeds = {}  # –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π seed –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª—É
        self.calib_queue = calib_queue
        self.config = STAGE2_CONFIG

    async def run_calibration_system(
        self,
        symbols: List[str],
        timeframes: List[str],
        date_from: datetime,
        date_to: datetime,
        n_trials: int = 50,
        config_template: Optional[Dict] = None,
        override_old: bool = True,
        parallel: bool = True,
    ) -> Dict[str, Any]:
        if parallel:
            tasks = []
            for symbol in symbols:
                for tf in timeframes:
                    task = asyncio.create_task(
                        self.calibrate_symbol_timeframe(
                            symbol,
                            tf,
                            date_from,
                            date_to,
                            n_trials,
                            config_template,
                            override_old,
                        )
                    )
                    tasks.append(task)
            results = await asyncio.gather(*tasks)
        else:
            results = []
            for symbol in symbols:
                for tf in timeframes:
                    result = await self.calibrate_symbol_timeframe(
                        symbol,
                        tf,
                        date_from,
                        date_to,
                        n_trials,
                        config_template,
                        override_old,
                    )
                    results.append(result)

        self.calibration_results = {
            f"{res['symbol']}:{res['timeframe']}": res for res in results
        }

        # --- –î—Ä—É–∫ –ø—ñ–¥—Å—É–º–∫—É –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –¥–ª—è –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤—ñ–≤ ---
        logger.info("\n" + "=" * 80)
        logger.info("üéØ –ü–Ü–î–°–£–ú–û–ö –ö–ê–õ–Ü–ë–†–£–í–ê–ù–ù–Ø")
        for key, res in self.calibration_results.items():
            if "error" in res:
                logger.error(f"  {key}: ‚ùå {res['error']}")
            else:
                oos = res.get("oos_validation", {})
                logger.info(f"  {key}:")
                logger.info(f"    Score: {res.get('best_value', 0):.4f}")
                logger.info(f"    –ü–∞—Ä–∞–º–µ—Ç—Ä–∏: {res.get('best_params', {})}")
                logger.info(
                    f"    OOS: Sharpe={oos.get('sharpe', '-'):.2f}, "
                    f"Sortino={oos.get('sortino', '-'):.2f}, "
                    f"Trades={oos.get('total_trades', '-')}"
                )
        logger.info("=" * 80 + "\n")
        return self.calibration_results

    def optimization_callback(
        self, study: optuna.Study, trial: optuna.trial.FrozenTrial
    ):
        if trial.state == optuna.trial.TrialState.COMPLETE:
            logger.debug(f"Trial {trial.number} finished with value: {trial.value}")

    async def calibrate_symbol_timeframe(
        self,
        symbol: str,
        timeframe: str,
        date_from: datetime,
        date_to: datetime,
        n_trials: int,
        config_template: Optional[Dict],
        override_old: bool,
    ) -> Dict[str, Any]:
        logger.info(f"üöÄ –ü–æ—á–∞—Ç–æ–∫ –∫–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è –¥–ª—è {symbol} –Ω–∞ {timeframe} —Ç–∞–π–º—Ñ—Ä–µ–π–º—ñ")
        redis_key = f"calib:{symbol}:{timeframe}"
        if not override_old:
            cached_result = await self.get_calibration_result(redis_key)
            if cached_result:
                logger.debug(
                    f"‚ôªÔ∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –∫–µ—à–æ–≤–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è {symbol}:{timeframe}"
                )
                return cached_result

        # –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π seed –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª—É
        if symbol not in self.symbol_seeds:
            self.symbol_seeds[symbol] = int(datetime.now().timestamp() % 1000)
        seed = self.symbol_seeds[symbol]

        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
        df = await load_data(
            self.fetcher,
            self.ram_buffer,
            symbol,
            timeframe,
            date_from,
            date_to,
            self.min_bars,
        )
        if df is None or len(df) < 100:
            logger.error(f"–ü—Ä–æ–±–ª–µ–º–∞ –∑ –¥–∞–Ω–∏–º–∏: {len(df) if df is not None else 0} –±–∞—Ä—ñ–≤")
            logger.debug(f"–ö–æ–ª–æ–Ω–∫–∏: {df.columns.tolist() if df is not None else []}")
            logger.debug(
                f"–ü–µ—Ä—à—ñ —Ä—è–¥–∫–∏: {df.head(2).to_dict() if df is not None else []}"
            )
            return {
                "symbol": symbol,
                "timeframe": timeframe,
                "error": "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö",
                "calibration_time": datetime.utcnow().isoformat(),
            }

        logger.debug(f"üìä –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(df)} –±–∞—Ä—ñ–≤ –¥–ª—è {symbol}:{timeframe}")
        try:
            # –ì–Ω—É—á–∫—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º—ñ–≤
            df = calculate_indicators(
                df,
                custom_periods={
                    "rsi_period": 10,
                    "volume_window": 30,
                    "atr_period": 10,
                },
            )
        except Exception as e:
            logger.error(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤: {str(e)}")
            return {
                "symbol": symbol,
                "timeframe": timeframe,
                "error": f"Indicator error: {str(e)}",
                "calibration_time": datetime.utcnow().isoformat(),
            }

        # –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –∫–æ–ª–æ–Ω–æ–∫
        critical_cols = ["volume_z", "rsi", "vwap_deviation", "atr"]
        df = df.dropna(subset=critical_cols).reset_index(drop=True)

        if len(df) < 50:
            logger.error(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –ø—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏: {len(df)} –±–∞—Ä—ñ–≤")
            return {
                "symbol": symbol,
                "timeframe": timeframe,
                "error": "Insufficient data after processing",
                "calibration_time": datetime.utcnow().isoformat(),
                "data_points": len(df),
            }

        # --- Optuna study –∑ –¥–∏–Ω–∞–º—ñ—á–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ ---
        study = optuna.create_study(
            direction="maximize",
            sampler=optuna.samplers.TPESampler(
                seed=seed,
                n_startup_trials=min(30, n_trials // 2),  # –ë—ñ–ª—å—à–µ –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö —Å–ø—Ä–æ–±
                multivariate=True,  # –î–æ–∑–≤–æ–ª–∏—Ç–∏ –≤–∑–∞—î–º–æ–¥—ñ—é –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
            ),
            pruner=optuna.pruners.MedianPruner(
                n_startup_trials=20,  # –ó–±—ñ–ª—å—à–∏—Ç–∏ –∑ 10
                n_warmup_steps=20,  # –ó–±—ñ–ª—å—à–∏—Ç–∏ –∑ 10
                interval_steps=5,
            ),
            study_name=f"{symbol}_{timeframe}_{seed}",
        )

        # --- –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ ---
        study.optimize(
            lambda trial: objective(
                trial,
                df,
                config_template,
                metric_weights=getattr(self, "metric_weights", None),
                run_backtest_fn=run_backtest,
                calculate_summary_fn=calculate_summary,
                metric="weighted_score",  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–æ–º–ø–æ–∑–∏—Ç–Ω–∏–π –ø–æ–∫–∞–∑–Ω–∏–∫
                min_trades=1,  # –î–æ–∑–≤–æ–ª—è—î–º–æ trial –∑ 1-2 —Ç—Ä–µ–π–¥–∞–º–∏
            ),
            n_trials=n_trials,
            callbacks=[self.optimization_callback],  # –ó–∞–∫–æ–º–µ–Ω—Ç—É–≤–∞—Ç–∏ —Ü–µ–π —Ä—è–¥–æ–∫
            show_progress_bar=True,
        )

        completed_trials = study.get_trials(
            deepcopy=False, states=[optuna.trial.TrialState.COMPLETE]
        )
        pruned_trials = study.get_trials(
            deepcopy=False, states=[optuna.trial.TrialState.PRUNED]
        )

        logger.debug(
            f"üìà –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è {symbol}:{timeframe}. "
            f"–£—Å–ø—ñ—à–Ω–∏—Ö: {len(completed_trials)}, –ü—Ä–∏–ø–∏–Ω–µ–Ω–æ: {len(pruned_trials)}"
        )

        # –ê–Ω–∞–ª—ñ–∑ –ø—Ä–∏—á–∏–Ω –ø—Ä–∏–ø–∏–Ω–µ–Ω–Ω—è
        reasons = {}
        if pruned_trials:
            for trial in pruned_trials:
                reason = trial.user_attrs.get("reason", "Unknown")
                reasons[reason] = reasons.get(reason, 0) + 1
            logger.warning(f"üìâ –ü—Ä–∏—á–∏–Ω–∏ –ø—Ä–∏–ø–∏–Ω–µ–Ω–Ω—è trial: {reasons}")

        # –û–±—Ä–æ–±–∫–∞ –≤–∏–ø–∞–¥–∫—É –±–µ–∑ —É—Å–ø—ñ—à–Ω–∏—Ö trial
        if not completed_trials:
            logger.error(f"‚ùå –£—Å—ñ trial –±—É–ª–∏ –ø—Ä–∏–ø–∏–Ω–µ–Ω—ñ –¥–ª—è {symbol}:{timeframe}")
            # –°–ø—Ä–æ–±–∞ –∑–Ω–∞–π—Ç–∏ –Ω–∞–π–º–µ–Ω—à –ø–æ–≥–∞–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä
            best_pruned_trial = None
            for trial in study.trials:
                if trial.value is not None and (
                    best_pruned_trial is None or trial.value > best_pruned_trial.value
                ):
                    best_pruned_trial = trial
            if best_pruned_trial:
                logger.warning(f"‚ö° –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –Ω–∞–π–∫—Ä–∞—â–æ–≥–æ –ø—Ä–∏–ø–∏–Ω–µ–Ω–æ–≥–æ trial")
                best_params = best_pruned_trial.params
                best_value = best_pruned_trial.value
                completed_trials = [best_pruned_trial]
            else:
                return {
                    "symbol": symbol,
                    "timeframe": timeframe,
                    "error": "All trials were pruned - no valid parameters found",
                    "calibration_time": datetime.utcnow().isoformat(),
                    "trials": n_trials,
                    "pruned_reasons": reasons,
                }
        else:
            best_params = study.best_params
            best_value = study.best_value

        # --- –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –ø–æ–≤—Ç–æ—Ä–Ω–∏–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏ –º–∞–ª—ñ–π –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≤–¥–∞–ª–∏—Ö —Å–ø—Ä–æ–± ---
        if len(completed_trials) < 5:
            logger.warning("–ú–∞–ª–æ –≤–¥–∞–ª–∏—Ö —Å–ø—Ä–æ–±, –ø—Ä–æ–±—É—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏")
            expanded_params = {
                **best_params,
                "volume_z_threshold": max(
                    1.0, best_params.get("volume_z_threshold", 2.0) * 0.7
                ),
            }
            trades = run_backtest(df, expanded_params)
            logger.debug(
                f"–î–æ–¥–∞—Ç–∫–æ–≤–∏–π –∑–∞–ø—É—Å–∫: {len(trades)} —Ç—Ä–µ–π–¥—ñ–≤ –ø—Ä–∏ volume_z_threshold={expanded_params['volume_z_threshold']}"
            )

            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–π–∫—Ä–∞—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫—É
            if trades:
                avg_volume_z = np.mean([t["volume_z"] for t in trades])
                avg_rsi = np.mean([t["rsi"] for t in trades])
                avg_atr = np.mean([t["atr"] for t in trades])

                best_params.update(
                    {
                        "volume_z_threshold": avg_volume_z,
                        "rsi_overbought": avg_rsi,
                        "atr_multiplier": avg_atr,
                    }
                )
                logger.info(
                    f"üîÑ –û–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–π–∫—Ä–∞—â—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫—É: {best_params}"
                )

        # –ü—ñ–¥—Å—É–º–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª—É/—Ç–∞–π–º—Ñ—Ä–µ–π–º—É
        logger.info(f"\nüîç –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –¥–ª—è {symbol}/{timeframe}:")
        logger.info(f"   - –ù–∞–π–∫—Ä–∞—â–∏–π score: {best_value:.4f}")
        logger.info(f"   - –£—Å–ø—ñ—à–Ω—ñ trial: {len(completed_trials)}/{n_trials}")
        logger.info(f"   - –ù–∞–π–∫—Ä–∞—â—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:")
        for param, value in best_params.items():
            logger.info(f"      {param}: {value:.4f}")

        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–∞ OOS –¥–∞–Ω–∏—Ö
        oos_metrics = await self.run_oos_validation(
            symbol, timeframe, date_to, best_params
        )

        # –î–æ–¥–∞–π—Ç–µ oos_metrics –¥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        result = {
            "symbol": symbol,
            "timeframe": timeframe,
            "recommended_params": best_params,
            "best_value": best_value,
            "trials": n_trials,
            "calibration_time": datetime.utcnow().isoformat(),
            "data_points": len(df),
            "successful_trials": len(completed_trials),
            "pruned_trials": len(pruned_trials),
            "pruned_reasons": reasons,
            "oos_validation": oos_metrics,
            "seed": seed,
        }

        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —É Redis
        await self.save_calibration_result(redis_key, result)

        return result

    async def get_calibration_result(self, redis_key: str) -> Optional[Dict]:
        """
        –û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∫–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è –∑ Redis.
        """
        try:
            cached_data = await self.redis.get(redis_key)
            if cached_data:
                result = json.loads(cached_data)
                logger.info(f"‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –∫–µ—à–æ–≤–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è {redis_key}")
                return result
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑ –∫–µ—à—É {redis_key}: {str(e)}")
        return None

    async def save_calibration_result(self, redis_key: str, result: Dict):
        """
        –ó–±–µ—Ä–µ–≥—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∫–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è –≤ Redis.
        """
        try:
            # –î–æ–¥–∞—î–º–æ TTL (—á–∞—Å –∂–∏—Ç—Ç—è) –¥–ª—è –∫–µ—à—É - 1 –≥–æ–¥–∏–Ω–∞
            await self.redis.set(redis_key, json.dumps(result), ex=3600)
            logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∫–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –∫–µ—à—ñ –¥–ª—è {redis_key}")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –∫–µ—à {redis_key}: {str(e)}")

    async def run_oos_validation(
        self, symbol: str, timeframe: str, date_to: datetime, params: Dict
    ) -> Dict:
        """–ó–∞–ø—É—Å–∫ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –Ω–∞ –ø–æ–∑–∞–≤–∏–±—ñ—Ä–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö"""
        try:
            oos_date_from = date_to - timedelta(days=30)
            oos_df = await load_data(
                self.fetcher,
                self.ram_buffer,
                symbol,
                timeframe,
                oos_date_from,
                date_to,
                max(100, self.min_bars // 3),
            )
            if oos_df is None or len(oos_df) < 50:
                return {"error": "Insufficient OOS data"}
            oos_df = calculate_indicators(
                oos_df,
                custom_periods={
                    "rsi_period": 10,
                    "volume_window": 30,
                    "atr_period": 10,
                },
            )
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –∫–æ–ª–æ–Ω–æ–∫
            critical_cols = ["volume_z", "rsi", "vwap_deviation", "atr"]
            oos_df = oos_df.dropna(subset=critical_cols).reset_index(drop=True)
            if len(oos_df) < 30:
                return {"error": "Insufficient data after processing"}
            oos_trades = run_backtest(oos_df, params)
            if not oos_trades:
                return {"error": "No trades in OOS validation"}
            oos_summary = calculate_summary(oos_trades)
            # –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è OOS –º–µ—Ç—Ä–∏–∫
            return {
                "sharpe": safe_metric_value(calculate_sharpe(oos_trades)),
                "sortino": safe_metric_value(calculate_sortino(oos_trades)),
                "profit_factor": safe_metric_value(
                    oos_summary.get("profit_factor", 0.0)
                ),
                "win_rate": safe_metric_value(oos_summary.get("win_rate", 0.0)),
                "total_trades": len(oos_trades),
            }
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ OOS –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó: {str(e)}")
            return {"error": f"Validation error: {str(e)}"}

    def set_metric_weights(self, weights: Dict[str, float]):
        """
        –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –≤–∞–≥–∏ –¥–ª—è –º–µ—Ç—Ä–∏–∫ –ø—Ä–∏ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó.
        """
        self.metric_weights = weights

    def get_metric_weights(self) -> Dict[str, float]:
        """
        –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ –≤–∞–≥–∏ –º–µ—Ç—Ä–∏–∫.
        """
        return getattr(self, "metric_weights", {})

    def set_param_ranges(self, ranges: Dict[str, Tuple[float, float]]):
        """
        –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –¥—ñ–∞–ø–∞–∑–æ–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –¥–ª—è –∫–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è.
        """
        self.param_ranges = ranges

    def get_param_ranges(self) -> Dict[str, Tuple[float, float]]:
        """
        –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ –¥—ñ–∞–ø–∞–∑–æ–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤.
        """
        return getattr(self, "param_ranges", {})

    def set_additional_indicators(self, indicators: List[str]):
        """
        –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –ø—ñ–¥ —á–∞—Å –∫–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è.
        """
        self.additional_indicators = indicators

    def get_additional_indicators(self) -> List[str]:
        """
        –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤.
        """
        return getattr(self, "additional_indicators", [])

    def set_logging_level(self, level: int):
        """
        –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Ä—ñ–≤–µ–Ω—å –ª–æ–≥—É–≤–∞–Ω–Ω—è.
        """
        logger.setLevel(level)

    def get_logging_level(self) -> int:
        """
        –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–≤–µ–Ω—å –ª–æ–≥—É–≤–∞–Ω–Ω—è.
        """
        return logger.level

    def set_calibration_mode(self, mode: str):
        """
        –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Ä–µ–∂–∏–º –∫–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 'fast', 'full').
        """
        self.calibration_mode = mode

    def get_calibration_mode(self) -> str:
        """
        –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Ä–µ–∂–∏–º –∫–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è.
        """
        return getattr(self, "calibration_mode", "full")

    def set_data_source(self, source: str):
        """
        –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –¥–∂–µ—Ä–µ–ª–æ –¥–∞–Ω–∏—Ö (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 'api', 'file').
        """
        self.data_source = source

    def get_data_source(self) -> str:
        """
        –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–µ –¥–∂–µ—Ä–µ–ª–æ –¥–∞–Ω–∏—Ö.
        """
        return getattr(self, "data_source", "api")

    def set_execution_mode(self, mode: str):
        """
        –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Ä–µ–∂–∏–º –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 'live', 'backtest').
        """
        self.execution_mode = mode

    def get_execution_mode(self) -> str:
        """
        –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Ä–µ–∂–∏–º –≤–∏–∫–æ–Ω–∞–Ω–Ω—è.
        """
        return getattr(self, "execution_mode", "backtest")

    def set_slippage_model(self, model: str):
        """
        –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –º–æ–¥–µ–ª—å —Å–ª—ñ–ø–ø–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 'none', 'fixed', 'variable').
        """
        self.slippage_model = model

    def get_slippage_model(self) -> str:
        """
        –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –º–æ–¥–µ–ª—å —Å–ª—ñ–ø–ø–∏.
        """
        return getattr(self, "slippage_model", "none")

    def set_commission_model(self, model: str):
        """
        –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –º–æ–¥–µ–ª—å –∫–æ–º—ñ—Å—ñ—ó (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 'fixed', 'percentage').
        """
        self.commission_model = model

    def get_commission_model(self) -> str:
        """
        –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –º–æ–¥–µ–ª—å –∫–æ–º—ñ—Å—ñ—ó.
        """
        return getattr(self, "commission_model", "fixed")

    def set_order_type(self, order_type: str):
        """
        –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Ç–∏–ø –æ—Ä–¥–µ—Ä—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 'limit', 'market').
        """
        self.order_type = order_type

    def get_order_type(self) -> str:
        """
        –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Ç–∏–ø –æ—Ä–¥–µ—Ä—É.
        """
        return getattr(self, "order_type", "limit")

    def set_timeframe_alignment(self, alignment: bool):
        """
        –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –≤–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è —Ç–∞–π–º—Ñ—Ä–µ–π–º—ñ–≤ (True/False).
        """
        self.timeframe_alignment = alignment

    def get_timeframe_alignment(self) -> bool:
        """
        –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è —Ç–∞–π–º—Ñ—Ä–µ–π–º—ñ–≤.
        """
        return getattr(self, "timeframe_alignment", True)

    def set_max_drawdown(self, drawdown: float):
        """
        –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –¥–æ–ø—É—Å—Ç–∏–º–∏–π —Ä—ñ–≤–µ–Ω—å –ø—Ä–æ—Å–∞–¥–∫–∏ (drawdown) –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó.
        """
        self.max_drawdown = drawdown

    def get_max_drawdown(self) -> float:
        """
        –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–≤–µ–Ω—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ drawdown.
        """
        return getattr(self, "max_drawdown", 0.0)
