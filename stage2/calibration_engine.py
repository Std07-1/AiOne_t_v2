"""calibration_engine.py"""

import asyncio
import json
import logging
import os
import time
import numpy as np
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Tuple
import optuna
import warnings
from optuna.samplers import TPESampler
from .calibration.indicators import calculate_indicators
from .calibration.backtest import run_backtest, calculate_summary
from .calibration.calibration import (
    objective,
    calculate_sharpe,
    calculate_sortino,
    safe_metric_value,
)
from .calibration.data import load_data

from stage2.calibration.calibration_config import CalibrationConfig

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger("calibration_module")
logger.setLevel(logging.DEBUG)
handler = logging.StreamHandler()
formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
handler.setFormatter(formatter)
logger.addHandler(handler)
logger.propagate = False

from optuna.exceptions import ExperimentalWarning

# –Ü–≥–Ω–æ—Ä—É–≤–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–æ multivariate
warnings.filterwarnings("ignore", category=ExperimentalWarning)

from optuna.logging import set_verbosity

# –í–∏–º–∫–Ω—É—Ç–∏ –≤—Å—ñ –ª–æ–≥–∏ Optuna
set_verbosity(optuna.logging.WARNING)
optuna.logging.set_verbosity(optuna.logging.WARNING)
# –ê–±–æ —â–µ —Å–∏–ª—å–Ω—ñ—à–µ - –≤–∏–º–∫–Ω—É—Ç–∏ –ø–æ–≤–Ω—ñ—Å—Ç—é
# optuna.logging.disable_default_handler()


class CalibrationEngine:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –¥–≤–∏–≥—É–Ω –¥–ª—è –∫–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è —Ç–∞ –±–µ–∫—Ç–µ—Å—Ç–∏–Ω–≥—É —Ç–æ—Ä–≥–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏.
    –û–ø—Ç–∏–º—ñ–∑—É—î –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∞–∫—Ç–∏–≤—É —Ç–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º—É –æ–∫—Ä–µ–º–æ.
    """

    def __init__(
        self,
        config: CalibrationConfig,  # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∫–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è
        stage2_config: dict,  # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Stage2
        fetcher: Any,  # –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π —Ñ–µ—Ç—á–µ—Ä –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
        redis_client,  # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Redis
        ram_buffer,  # –û–±'—î–¥–Ω–∞–Ω–∏–π –±—É—Ñ–µ—Ä –¥–ª—è –¥–∞–Ω–∏—Ö
        interval: str = "1m",  # –¢–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
        min_bars: int = 350,  # –í–∏–∑–Ω–∞—á–µ–Ω–æ —É main.py (—Ä—è–¥–æ–∫ 485)
        metric: str = "profit_factor",  # –ú–µ—Ç—Ä–∏–∫–∞ –¥–ª—è –∫–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è
        calib_queue: Optional[Any] = None,  # –ß–µ—Ä–≥–∞ –∫–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å
    ):
        self.fetcher = fetcher  # –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π —Ñ–µ—Ç—á–µ—Ä –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
        self.interval = interval  # –¢–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
        self.min_bars = min_bars  # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–∞—Ä—ñ–≤ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
        self.redis = redis_client  # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Redis –¥–ª—è –∫–µ—à—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        self.ram_buffer = ram_buffer  # –û–±'—î–¥–Ω–∞–Ω–∏–π –±—É—Ñ–µ—Ä –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó
        self.metric = metric  # –ú–µ—Ç—Ä–∏–∫–∞ –¥–ª—è –∫–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è
        self.calibration_results = (
            {}
        )  # –ó–±–µ—Ä—ñ–≥–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∫–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∞–∫—Ç–∏–≤—É
        self.symbol_seeds = {}  # –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π seed –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª—É
        self.calib_queue = calib_queue  # –ß–µ—Ä–≥–∞ –∫–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å
        self.config = config  # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∫–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è
        self.stage2_config = stage2_config  # STAGE2_CONFIG –∑ config.py
        self.circuit_breakers: Dict[str, float] = (
            {}
        )  # –ó–±–µ—Ä—ñ–≥–∞—î –∞–∫—Ç–∏–≤–Ω—ñ circuit breakers –¥–ª—è —Å–∏–º–≤–æ–ª—ñ–≤

    def unify_stage2_params(self, params: Dict[str, Any]) -> Dict[str, Any]:
        """
        –ì–∞—Ä–∞–Ω—Ç—É—î, —â–æ —Å–ª–æ–≤–Ω–∏–∫ –º—ñ—Å—Ç–∏—Ç—å –≤—Å—ñ —É–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω—ñ –∫–ª—é—á—ñ Stage2 –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –∫–æ–Ω—Ñ—ñ–≥—É.
        –Ø–∫—â–æ —î –ª–∏—à–µ atr_multiplier ‚Äî –ø—Ä–∏—Å–≤–æ—é—î tp_mult —ñ sl_mult.
        –î–æ–¥–∞—î –¥–µ—Ñ–æ–ª—Ç–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö –∫–ª—é—á—ñ–≤.
        """
        unified_keys = {
            "volume_z_threshold": self.config.volume_z_threshold,
            "tp_mult": self.config.tp_mult,
            "sl_mult": self.config.sl_mult,
            "min_confidence": self.config.min_confidence,
            "rsi_oversold": self.config.rsi_oversold,
            "rsi_overbought": self.config.rsi_overbought,
            "vwap_threshold": self.config.vwap_threshold,
            "macd_threshold": self.config.macd_threshold,
            "stoch_oversold": self.config.stoch_oversold,
            "stoch_overbought": self.config.stoch_overbought,
        }
        # –Ø–∫—â–æ —î –ª–∏—à–µ atr_multiplier, –ø—Ä–∏—Å–≤–æ—é—î–º–æ tp_mult —ñ sl_mult
        if "atr_multiplier" in params:
            params["tp_mult"] = params["sl_mult"] = params["atr_multiplier"]
        result = {}
        for k, v in unified_keys.items():
            result[k] = float(params[k]) if k in params else v

        # –ú–µ—Ä–¥–∂ –∑ –≤—Ö—ñ–¥–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        return {**unified_keys, **params}

    async def run_calibration_system(
        self,
        symbols: List[str],
        timeframes: List[str],
        date_from: datetime,
        date_to: datetime,
        n_trials: int = 50,
        config_template: Optional[Dict] = None,
        override_old: bool = True,
        parallel: bool = True,
    ) -> Dict[str, Any]:
        if parallel:
            tasks = []
            for symbol in symbols:
                for tf in timeframes:
                    task = asyncio.create_task(
                        self.calibrate_symbol_timeframe(
                            symbol,
                            tf,
                            date_from,
                            date_to,
                            n_trials,
                            config_template,
                            override_old,
                        )
                    )
                    tasks.append(task)
            results = await asyncio.gather(*tasks)
        else:
            results = []
            for symbol in symbols:
                for tf in timeframes:
                    result = await self.calibrate_symbol_timeframe(
                        symbol,
                        tf,
                        date_from,
                        date_to,
                        n_trials,
                        config_template,
                        override_old,
                    )
                    results.append(result)

        self.calibration_results = {
            f"{res['symbol']}:{res['timeframe']}": res for res in results
        }

        # --- –î—Ä—É–∫ –ø—ñ–¥—Å—É–º–∫—É –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –¥–ª—è –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤—ñ–≤ ---
        logger.info("\n" + "=" * 80)
        logger.info("üéØ –ü–Ü–î–°–£–ú–û–ö –ö–ê–õ–Ü–ë–†–£–í–ê–ù–ù–Ø")
        for key, res in self.calibration_results.items():
            if "error" in res:
                logger.error(f"  {key}: ‚ùå {res['error']}")
            else:
                oos = res.get("oos_validation", {})
                logger.info(f"  {key}:")
                logger.info(f"    Score: {res.get('best_value', 0):.4f}")
                logger.info(f"    –ü–∞—Ä–∞–º–µ—Ç—Ä–∏: {res.get('best_params', {})}")
                logger.info(
                    f"    OOS: Sharpe={oos.get('sharpe', '-'):.2f}, "
                    f"Sortino={oos.get('sortino', '-'):.2f}, "
                    f"Trades={oos.get('total_trades', '-')}"
                )
        logger.info("=" * 80 + "\n")
        return self.calibration_results

    def optimization_callback(
        self, study: optuna.Study, trial: optuna.trial.FrozenTrial
    ):
        if trial.state == optuna.trial.TrialState.COMPLETE:
            logger.debug(f"Trial {trial.number} finished with value: {trial.value}")

    async def calibrate_symbol_timeframe(
        self,
        symbol: str,
        timeframe: str,
        date_from: datetime,
        date_to: datetime,
        n_trials: int,
        config_template: Optional[Dict],
        override_old: bool,
    ) -> Dict[str, Any]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–µ –∫–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª—É —Ç–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º—É."""

        if self._is_circuit_active(symbol, timeframe):
            logger.warning(
                f"‚ö° –ü—Ä–æ–ø—É—â–µ–Ω–æ {symbol}/{timeframe} ‚Äî –∞–∫—Ç–∏–≤–Ω–∏–π circuit breaker"
            )
            return {
                "symbol": symbol,
                "timeframe": timeframe,
                "error": "Circuit breaker active",
                "calibration_time": datetime.utcnow().isoformat(),
            }

        logger.info(f"üöÄ –ü–æ—á–∞—Ç–æ–∫ –∫–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è –¥–ª—è {symbol} –Ω–∞ {timeframe} —Ç–∞–π–º—Ñ—Ä–µ–π–º—ñ")
        redis_key = f"calib:{symbol}:{timeframe}"
        if not override_old:
            cached_result = await self.get_calibration_result(redis_key)
            if cached_result:
                logger.debug(
                    f"‚ôªÔ∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –∫–µ—à–æ–≤–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è {symbol}:{timeframe}"
                )
                return cached_result

        # –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π seed –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª—É
        if symbol not in self.symbol_seeds:
            self.symbol_seeds[symbol] = int(datetime.now().timestamp() % 1000)
        seed = self.symbol_seeds[symbol]

        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
        df = await load_data(
            self.fetcher,
            self.ram_buffer,
            symbol,
            timeframe,
            date_from,
            date_to,
            self.min_bars,
        )
        if df is None or len(df) < 100:
            logger.error(f"–ü—Ä–æ–±–ª–µ–º–∞ –∑ –¥–∞–Ω–∏–º–∏: {len(df) if df is not None else 0} –±–∞—Ä—ñ–≤")
            logger.debug(f"–ö–æ–ª–æ–Ω–∫–∏: {df.columns.tolist() if df is not None else []}")
            logger.debug(
                f"–ü–µ—Ä—à—ñ —Ä—è–¥–∫–∏: {df.head(2).to_dict() if df is not None else []}"
            )
            return {
                "symbol": symbol,
                "timeframe": timeframe,
                "error": "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö",
                "calibration_time": datetime.utcnow().isoformat(),
            }

        logger.debug(f"üìä –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(df)} –±–∞—Ä—ñ–≤ –¥–ª—è {symbol}:{timeframe}")
        try:
            # –ì–Ω—É—á–∫—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º—ñ–≤
            df = calculate_indicators(
                df,
                custom_periods={
                    "rsi_period": self.stage2_config.get("rsi_period", 14),
                    "volume_window": self.stage2_config.get("volume_window", 30),
                    "atr_period": self.stage2_config.get("atr_period", 14),
                },
            )
        except Exception as e:
            logger.error(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤: {str(e)}")
            return {
                "symbol": symbol,
                "timeframe": timeframe,
                "error": f"Indicator error: {str(e)}",
                "calibration_time": datetime.utcnow().isoformat(),
            }

        # –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –∫–æ–ª–æ–Ω–æ–∫
        critical_cols = ["volume_z", "rsi", "vwap_deviation", "atr"]
        df = df.dropna(subset=critical_cols).reset_index(drop=True)

        if len(df) < 50:
            logger.error(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –ø—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏: {len(df)} –±–∞—Ä—ñ–≤")
            return {
                "symbol": symbol,
                "timeframe": timeframe,
                "error": "Insufficient data after processing",
                "calibration_time": datetime.utcnow().isoformat(),
                "data_points": len(df),
            }

        # --- Optuna study –∑ –¥–∏–Ω–∞–º—ñ—á–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ ---
        study = optuna.create_study(
            direction="maximize",
            sampler=optuna.samplers.TPESampler(
                seed=seed,
                n_startup_trials=min(30, n_trials // 2),  # –ë—ñ–ª—å—à–µ –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö —Å–ø—Ä–æ–±
                multivariate=True,  # –î–æ–∑–≤–æ–ª–∏—Ç–∏ –≤–∑–∞—î–º–æ–¥—ñ—é –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
            ),
            pruner=optuna.pruners.MedianPruner(
                n_startup_trials=20,  # –ó–±—ñ–ª—å—à–∏—Ç–∏ –∑ 10
                n_warmup_steps=20,  # –ó–±—ñ–ª—å—à–∏—Ç–∏ –∑ 10
                interval_steps=5,
            ),
            study_name=f"{symbol}_{timeframe}_{seed}",
        )

        # --- –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ ---
        study.optimize(
            lambda trial: objective(
                trial,
                df,
                symbol,
                config_template,
                metric_weights=getattr(self, "metric_weights", None),
                run_backtest_fn=run_backtest,
                calculate_summary_fn=calculate_summary,
                metric="weighted_score",  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–æ–º–ø–æ–∑–∏—Ç–Ω–∏–π –ø–æ–∫–∞–∑–Ω–∏–∫
                min_trades=1,  # –î–æ–∑–≤–æ–ª—è—î–º–æ trial –∑ 1-2 —Ç—Ä–µ–π–¥–∞–º–∏
            ),
            n_trials=n_trials,
            callbacks=[self.optimization_callback],  # –ó–∞–∫–æ–º–µ–Ω—Ç—É–≤–∞—Ç–∏ —Ü–µ–π —Ä—è–¥–æ–∫?
            show_progress_bar=True,
        )

        completed_trials = study.get_trials(
            deepcopy=False, states=[optuna.trial.TrialState.COMPLETE]
        )
        pruned_trials = study.get_trials(
            deepcopy=False, states=[optuna.trial.TrialState.PRUNED]
        )

        logger.debug(
            f"üìà –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è {symbol}:{timeframe}. "
            f"–£—Å–ø—ñ—à–Ω–∏—Ö: {len(completed_trials)}, –ü—Ä–∏–ø–∏–Ω–µ–Ω–æ: {len(pruned_trials)}"
        )

        # –ê–Ω–∞–ª—ñ–∑ –ø—Ä–∏—á–∏–Ω –ø—Ä–∏–ø–∏–Ω–µ–Ω–Ω—è
        reasons = {}
        if pruned_trials:
            for trial in pruned_trials:
                reason = trial.user_attrs.get("reason", "Unknown")
                reasons[reason] = reasons.get(reason, 0) + 1
            logger.warning(f"üìâ –ü—Ä–∏—á–∏–Ω–∏ –ø—Ä–∏–ø–∏–Ω–µ–Ω–Ω—è trial: {reasons}")

        # –û–±—Ä–æ–±–∫–∞ –≤–∏–ø–∞–¥–∫—É –±–µ–∑ —É—Å–ø—ñ—à–Ω–∏—Ö trial
        if not completed_trials:
            logger.error(f"‚ùå –£—Å—ñ trial –±—É–ª–∏ –ø—Ä–∏–ø–∏–Ω–µ–Ω—ñ –¥–ª—è {symbol}:{timeframe}")
            # –°–ø—Ä–æ–±–∞ –∑–Ω–∞–π—Ç–∏ –Ω–∞–π–º–µ–Ω—à –ø–æ–≥–∞–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä
            best_pruned_trial = None
            for trial in study.trials:
                if trial.value is not None and (
                    best_pruned_trial is None or trial.value > best_pruned_trial.value
                ):
                    best_pruned_trial = trial
            if best_pruned_trial:
                logger.warning(f"‚ö° –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –Ω–∞–π–∫—Ä–∞—â–æ–≥–æ –ø—Ä–∏–ø–∏–Ω–µ–Ω–æ–≥–æ trial")
                best_params = best_pruned_trial.params
                best_value = best_pruned_trial.value
                completed_trials = [best_pruned_trial]
            else:
                return {
                    "symbol": symbol,
                    "timeframe": timeframe,
                    "error": "All trials were pruned - no valid parameters found",
                    "calibration_time": datetime.utcnow().isoformat(),
                    "trials": n_trials,
                    "pruned_reasons": reasons,
                }
        else:
            best_params = study.best_params
            best_value = study.best_value

        # --- –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –ø–æ–≤—Ç–æ—Ä–Ω–∏–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏ –º–∞–ª—ñ–π –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≤–¥–∞–ª–∏—Ö —Å–ø—Ä–æ–± ---
        if len(completed_trials) < 5:
            logger.warning("–ú–∞–ª–æ –≤–¥–∞–ª–∏—Ö —Å–ø—Ä–æ–±, –ø—Ä–æ–±—É—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏")
            expanded_params = {
                **best_params,
                "volume_z_threshold": max(
                    1.0, best_params.get("volume_z_threshold", 2.0) * 0.7
                ),
            }
            trades = run_backtest(df, expanded_params)
            logger.debug(
                f"–î–æ–¥–∞—Ç–∫–æ–≤–∏–π –∑–∞–ø—É—Å–∫: {len(trades)} —Ç—Ä–µ–π–¥—ñ–≤ –ø—Ä–∏ volume_z_threshold={expanded_params['volume_z_threshold']}"
            )

            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–π–∫—Ä–∞—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫—É
            if trades:
                avg_volume_z = np.mean([t["volume_z"] for t in trades])
                avg_rsi = np.mean([t["rsi"] for t in trades])
                avg_atr = np.mean([t["atr"] for t in trades])

                best_params.update(
                    {
                        "volume_z_threshold": avg_volume_z,
                        "rsi_overbought": avg_rsi,
                        "atr_multiplier": avg_atr,
                    }
                )
                logger.info(
                    f"üîÑ –û–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–π–∫—Ä–∞—â—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫—É: {best_params}"
                )

        # –ü—ñ–¥—Å—É–º–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª—É/—Ç–∞–π–º—Ñ—Ä–µ–π–º—É
        logger.info(f"\nüîç –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –¥–ª—è {symbol}/{timeframe}:")
        logger.info(f"   - –ù–∞–π–∫—Ä–∞—â–∏–π score: {best_value:.4f}")
        logger.info(f"   - –£—Å–ø—ñ—à–Ω—ñ trial: {len(completed_trials)}/{n_trials}")
        logger.info(f"   - –ù–∞–π–∫—Ä–∞—â—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:")
        for param, value in best_params.items():
            logger.info(f"      {param}: {value:.4f}")

        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–∞ OOS –¥–∞–Ω–∏—Ö
        oos_metrics = await self.run_oos_validation(
            symbol, timeframe, date_to, best_params
        )

        result = {
            "symbol": symbol,
            "timeframe": timeframe,
            "recommended_params": best_params,
            "best_value": best_value,
            "trials": n_trials,
            "calibration_time": datetime.utcnow().isoformat(),
            "data_points": len(df),
            "successful_trials": len(completed_trials),
            "pruned_trials": len(pruned_trials),
            "pruned_reasons": reasons,
            "oos_validation": oos_metrics,
            "seed": seed,
        }

        # --- OOS-–≤–∞–ª—ñ–¥–∞—Ü—ñ—è –∑ –∫–æ–º–±—ñ–Ω–æ–≤–∞–Ω–æ—é –º–µ—Ç—Ä–∏–∫–æ—é ---
        is_valid, reason = self.validate_oos(oos_metrics)
        if not is_valid:
            logger.warning(f"OOS –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –ù–ï –ø—Ä–æ–π–¥–µ–Ω–∞ –¥–ª—è {symbol}: {reason}")
            self._trigger_circuit_breaker(symbol)
            return {
                "symbol": symbol,
                "timeframe": timeframe,
                "error": f"OOS validation failed: {reason}",
                "circuit_breaker": True,
                "oos_validation": oos_metrics,
                "calibration_time": datetime.utcnow().isoformat(),
            }

        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —É Redis
        await self.save_calibration_result(redis_key, result)

        return result

    @staticmethod
    def validate_oos(oos_metrics: dict) -> Tuple[bool, str]:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î —è–∫—ñ—Å—Ç—å OOS-–≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –∑–∞ –∫–æ–º–±—ñ–Ω–æ–≤–∞–Ω–æ—é –º–µ—Ç—Ä–∏–∫–æ—é.
        –ü–æ–≤–µ—Ä—Ç–∞—î (is_valid, reason).
        """
        min_trades = 1  # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–µ–π–¥—ñ–≤ –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó

        if oos_metrics.get("total_trades", 0) < min_trades:
            return False, "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Ç—Ä–µ–π–¥—ñ–≤ –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó"
        # –ö–æ–º–±—ñ–Ω–æ–≤–∞–Ω–∞ –º–µ—Ç—Ä–∏–∫–∞ —è–∫–æ—Å—Ç—ñ
        win_rate = oos_metrics.get("win_rate", 0)
        profit_factor = oos_metrics.get("profit_factor", 0)
        quality_score = win_rate * 0.4 + profit_factor * 0.6
        return quality_score > 0.5, f"Quality score: {quality_score:.2f}"

    async def get_calibration_result(self, redis_key: str) -> Optional[Dict]:
        """
        –û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∫–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è –∑ Redis.
        """
        try:
            cached_data = await self.redis.get(redis_key)
            if cached_data:
                result = json.loads(cached_data)
                logger.info(f"‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –∫–µ—à–æ–≤–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è {redis_key}")
                return result
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑ –∫–µ—à—É {redis_key}: {str(e)}")
        return None

    async def save_calibration_result(self, redis_key: str, result: Dict):
        """
        –ó–±–µ—Ä–µ–≥—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∫–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è –≤ Redis.
        """
        try:
            # –î–æ–¥–∞—î–º–æ TTL (—á–∞—Å –∂–∏—Ç—Ç—è) –¥–ª—è –∫–µ—à—É - 1 –≥–æ–¥–∏–Ω–∞
            await self.redis.set(redis_key, json.dumps(result), ex=3600)
            logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∫–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –∫–µ—à—ñ –¥–ª—è {redis_key}")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –∫–µ—à {redis_key}: {str(e)}")

    async def run_oos_validation(
        self, symbol: str, timeframe: str, date_to: datetime, params: Dict
    ) -> Dict:
        """–ó–∞–ø—É—Å–∫ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –Ω–∞ –ø–æ–∑–∞–≤–∏–±—ñ—Ä–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö"""
        try:
            oos_date_from = date_to - timedelta(days=30)
            oos_df = await load_data(
                self.fetcher,
                self.ram_buffer,
                symbol,
                timeframe,
                oos_date_from,
                date_to,
                max(100, self.min_bars // 3),
            )
            if oos_df is None or len(oos_df) < 50:
                return {"error": "Insufficient OOS data"}
            oos_df = calculate_indicators(
                oos_df,
                custom_periods={
                    "rsi_period": 14,
                    "volume_window": 30,
                    "atr_period": 14,
                },
            )
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –∫–æ–ª–æ–Ω–æ–∫
            critical_cols = ["volume_z", "rsi", "vwap_deviation", "atr"]
            oos_df = oos_df.dropna(subset=critical_cols).reset_index(drop=True)
            if len(oos_df) < 30:
                return {"error": "Insufficient data after processing"}
            oos_trades = run_backtest(oos_df, params)
            if not oos_trades:
                return {"error": "No trades in OOS validation"}
            oos_summary = calculate_summary(oos_trades)
            # –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è OOS –º–µ—Ç—Ä–∏–∫
            return {
                "sharpe": safe_metric_value(
                    calculate_sharpe(oos_trades, symbol), symbol=symbol
                ),
                "sortino": safe_metric_value(
                    calculate_sortino(oos_trades, symbol), symbol=symbol
                ),
                "profit_factor": safe_metric_value(
                    oos_summary.get("profit_factor", 0.0), symbol=symbol
                ),
                "win_rate": safe_metric_value(
                    oos_summary.get("win_rate", 0.0), symbol=symbol
                ),
                "total_trades": len(oos_trades),
            }
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ OOS –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó: {str(e)}")
            return {"error": f"Validation error: {str(e)}"}

    def _trigger_circuit_breaker(
        self, symbol: str, tf: str = "1m", cooldown: int = 900
    ):
        """
        –ê–∫—Ç–∏–≤—É—î circuit breaker –¥–ª—è –∑–∞–¥–∞–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª—É –π —Ç–∞–π–º—Ñ—Ä–µ–π–º—É –Ω–∞ –ø–µ–≤–Ω–∏–π —á–∞—Å (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 15 —Ö–≤–∏–ª–∏–Ω).
        """
        key = f"{symbol}:{tf}"
        self.circuit_breakers[key] = time.time() + cooldown
        logger.warning(
            f"üö® Circuit breaker –¥–ª—è {symbol}/{tf} –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ. –ù–∞—Å—Ç—É–ø–Ω–∞ —Å–ø—Ä–æ–±–∞ —á–µ—Ä–µ–∑ {cooldown} —Å–µ–∫."
        )

    def _is_circuit_active(self, symbol: str, tf: str = "1m") -> bool:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –∞–∫—Ç–∏–≤–Ω–∏–π circuit breaker –¥–ª—è —Å–∏–º–≤–æ–ª—É.
        """
        key = f"{symbol}:{tf}"
        if key in self.circuit_breakers:
            if time.time() < self.circuit_breakers[key]:
                return True
            del self.circuit_breakers[key]  # –ü—Ä–æ—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω–∏–π ‚Äî –≤–∏–¥–∞–ª—è—î–º–æ
        return False


"""
–ú–∏ –º–∞—î–º–æ –¥–µ–∫—ñ–ª—å–∫–∞ –º–æ–¥—É–ª—ñ–≤, —è–∫—ñ –≤–∑–∞—î–º–æ–¥—ñ—é—Ç—å —É –ø—Ä–æ—Ü–µ—Å—ñ –∫–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è. –û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏:
1. `CalibrationEngine` (calibration_engine.py) - —è–¥—Ä–æ –∫–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è, –∑–∞–ø—É—Å–∫–∞—î –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é Optuna.
2. `CalibrationQueue` (calibration_queue.py) - —á–µ—Ä–≥–∞ –∑–∞–≤–¥–∞–Ω—å –∫–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è –∑ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∞–º–∏, —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è–º –≤–æ—Ä–∫–µ—Ä–∞–º–∏ —Ç–∞ –æ–±–º–µ–∂–µ–Ω–Ω—è–º–∏.
3. `AssetStateManager` (screening_producer.py) - –º–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç–∞–Ω—É –∞–∫—Ç–∏–≤—ñ–≤, —è–∫–∏–π –≤—ñ–¥—Å—Ç–µ–∂—É—î —Å—Ç–∞–Ω –∫–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∞–∫—Ç–∏–≤—É.
4. `screening_producer` (screening_producer.py) - –≥–æ–ª–æ–≤–Ω–∏–π —Ü–∏–∫–ª, —è–∫–∏–π —ñ–Ω—ñ—Ü—ñ—é—î –∫–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è –¥–ª—è –∞–∫—Ç–∏–≤—ñ–≤ –∑ ALERT-—Å–∏–≥–Ω–∞–ª–∞–º–∏.
5. `run_pipeline` (main.py) - –≥–æ–ª–æ–≤–Ω–∏–π –ø–∞–π–ø–ª–∞–π–Ω, —è–∫–∏–π —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —Å–∏—Å—Ç–µ–º—É, –∑–∞–ø—É—Å–∫–∞—î –∫–∞–ª—ñ–±—Ä—É–≤–∞–ª—å–Ω—É —á–µ—Ä–≥—É —Ç–∞ –≤–æ—Ä–∫–µ—Ä–∏.
–¢–∞–∫–æ–∂ —î –¥–æ–ø–æ–º—ñ–∂–Ω—ñ –º–æ–¥—É–ª—ñ –¥–ª—è –±–µ–∫—Ç–µ—Å—Ç—É (`backtest.py`), —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –º–µ—Ç—Ä–∏–∫ (`calibration.py`), –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö (`data.py`), —Ç–æ—â–æ.

"""
