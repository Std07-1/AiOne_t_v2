# app/calibration_queue.py
# -*- coding: utf-8 -*-
# app/calibration_queue.py
# -*- coding: utf-8 -*-
"""
–ü–æ–∫—Ä–∞—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è CalibrationQueue –∑:
- –ó–∞—Ö–∏—Å—Ç–æ–º –≤—ñ–¥ –≤—Ç—Ä–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω—å
- –ê–¥–∞–ø—Ç–∏–≤–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∫–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è
- –°—Ç–∞—Ä—ñ–Ω–Ω—è–º –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—ñ–≤
- –ú–µ—Ç—Ä–∏–∫–∞–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
- Circuit Breaker
- TTL-—ñ–Ω–≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é –∫–µ—à—É
"""

from __future__ import annotations

import asyncio
import logging
import os
import re
import time
from collections import defaultdict
from datetime import datetime, timedelta
from typing import Any, Dict, Optional, Tuple, NamedTuple
import json

# –í–Ω—É—Ç—Ä—ñ—à–Ω—ñ –ø–∞–∫–µ—Ç–∏
from data.cache_handler import SimpleCacheHandler
from stage2.calibration_engine import CalibrationEngine
from stage2.calibration.calibration_config import CalibrationConfig
from app.utils.metrics import MetricsCollector  # –ù–æ–≤–∏–π –º–æ–¥—É–ª—å –¥–ª—è –º–µ—Ç—Ä–∏–∫

from rich.console import Console
from rich.logging import RichHandler

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
log = logging.getLogger("calib_queue")
log.setLevel(logging.DEBUG)
log.handlers.clear()
log.addHandler(RichHandler(console=Console(stderr=True), show_path=False))
log.propagate = False  # ‚Üê –ö—Ä–∏—Ç–∏—á–Ω–æ –≤–∞–∂–ª–∏–≤–æ!

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è Circuit Breaker
MAX_ATTEMPTS = 3  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–± –∫–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è
CIRCUIT_BREAKER_TIMEOUT = 600  # 10 —Ö–≤–∏–ª–∏–Ω

DEFAULT_ASSET_CLASS = "futures"  # –î–µ—Ñ–æ–ª—Ç–Ω–∏–π –∫–ª–∞—Å –∞–∫—Ç–∏–≤—ñ–≤


class AssetClassConfig:
    def __init__(self, mapping: Dict[str, list]):
        self.mapping = mapping
        self.compiled_patterns = self._compile_patterns(mapping)

    def _compile_patterns(
        self, mapping: Dict[str, list]
    ) -> Dict[str, list[re.Pattern]]:
        compiled = {}
        for asset_class, regex_list in mapping.items():
            compiled[asset_class] = [
                re.compile(regex, re.IGNORECASE) for regex in regex_list
            ]
        return compiled

    def match_symbol(self, symbol: str) -> Optional[str]:
        symbol = symbol.upper()
        for asset_class, patterns in self.compiled_patterns.items():
            for pattern in patterns:
                if pattern.search(symbol):
                    return asset_class
        return None

    async def update_calibration_status(self, symbol: str, status: str):
        if symbol in self.state:
            self.state[symbol]["calib_status"] = status
            self.state[symbol]["last_updated"] = datetime.utcnow().isoformat()


class CalibrationTask(NamedTuple):
    symbol: str
    tf: str
    priority: float
    created_at: float = time.time()
    attempts: int = 0
    is_high_priority: bool = False
    is_urgent: bool = False


class CalibrationQueue:
    def set_state_manager(self, state_manager: Any) -> None:
        """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î –∑–æ–≤–Ω—ñ—à–Ω—ñ–π state_manager –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∫–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è."""
        self._state_manager = state_manager
        log.info(f"StateManager set for CalibrationQueue: {id(state_manager)}")

    def __init__(
        self,
        config: CalibrationConfig,
        cache: SimpleCacheHandler,
        calib_engine: CalibrationEngine,
        metrics: Optional[MetricsCollector] = None,
        state_manager: Optional[Any] = None,
    ) -> None:
        self._cache = cache
        self._engine = calib_engine
        self.config = config
        self._sem = asyncio.Semaphore(config.max_concurrent)
        self._queue = asyncio.PriorityQueue()
        self._workers = []
        self._metrics = metrics or MetricsCollector()
        self._failure_count = defaultdict(int)
        self._circuit_breaker = {}

        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ asset_class_mapping –∑ –∫–æ–Ω—Ñ—ñ–≥—É
        self.asset_class_config = AssetClassConfig(config.asset_class_mapping)

        self._state_manager = state_manager
        self.alert_symbols = set()

        self.default_calib_count = 0

        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–æ–≤–∏—Ö –º–µ—Ç—Ä–∏–∫
        self._metrics.gauge("queue_size", 0)
        self._metrics.gauge("active_workers", 0)
        self._metrics.gauge("circuit_breaker_active", 0)
        log.info(
            f"CalibrationQueue created. Max concurrent: {config.max_concurrent}, "
            f"Default trials: {config.n_trials}, Lookback days: {config.lookback_days}"
        )

    def _get_asset_class(self, symbol: str) -> str:
        """–í–∏–∑–Ω–∞—á–∞—î –∫–ª–∞—Å –∞–∫—Ç–∏–≤—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""
        if matched_class := self.asset_class_config.match_symbol(symbol):
            return matched_class
        return DEFAULT_ASSET_CLASS  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü—É–±–ª—ñ—á–Ω–∏–π API ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    async def put(
        self,
        symbol: str,
        tf: str,
        priority: float = 0.5,
        is_high_priority: bool = False,
        is_urgent: bool = False,
    ) -> None:
        """
        –î–æ–¥–∞—î –∑–∞–≤–¥–∞–Ω–Ω—è –¥–æ —á–µ—Ä–≥–∏ –∑—ñ —Å—Ç–∞—Ä—ñ–Ω–Ω—è–º –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—ñ–≤ —Ç–∞ –¥–µ—Ç–∞–ª—å–Ω–∏–º –ª–æ–≥—É–≤–∞–Ω–Ω—è–º.
        –Ø–∫—â–æ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∂–µ —ñ—Å–Ω—É—î ‚Äî –æ–Ω–æ–≤–ª—é—î –π–æ–≥–æ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Ç–µ—Ä–º—ñ–Ω–æ–≤–∏—Ö/ALERT.
        –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ –ª–æ–≥—ñ–∫—É –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è: –≤–∏–¥–∞–ª—è—î—Ç—å—Å—è —Å–∞–º–µ —Ç–æ–π –∫–æ—Ä—Ç–µ–∂, —è–∫–∏–π –∑–Ω–∞–π–¥–µ–Ω–æ.
        """
        log.debug(
            f"[put] –í—Ö—ñ–¥: symbol={symbol}, tf={tf}, priority={priority}, is_high_priority={is_high_priority}, is_urgent={is_urgent}"
        )

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Å–∏–º–≤–æ–ª—É —Ç–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º—É
        if not symbol or not tf:
            log.error("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Å–∏–º–≤–æ–ª –∞–±–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º")
            return

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ circuit breaker
        if self._is_circuit_broken(symbol):
            log.warning(f"[put] Circuit breaker active for {symbol}, skipping")
            return

        # –ó–±—ñ–ª—å—à—É—î–º–æ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Ç–µ—Ä–º—ñ–Ω–æ–≤–∏—Ö –∑–∞–≤–¥–∞–Ω—å
        if is_urgent:
            priority = 1.0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç
        elif is_high_priority:
            priority = min(0.8, priority + 0.3)  # –í–∏—Å–æ–∫–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç
        else:
            priority = max(0.5, priority)  # –ó–≤–∏—á–∞–π–Ω–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å —Å–∏–º–≤–æ–ª—É —Ç–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º—É
        if not isinstance(symbol, str) or not isinstance(tf, str):
            log.error("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–∏–ø —Å–∏–º–≤–æ–ª—É –∞–±–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º—É")
            return

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–≤–∏–≥—É–Ω–∞
        if self._engine is None:
            log.error("‚ùå CalibrationEngine –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ!")
            return

        # --- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∂–µ –≤ —á–µ—Ä–∑—ñ ---
        current_time = time.time()
        found_task = None
        found_prio_tuple = None
        for prio_task in list(self._queue._queue):
            # prio_task: (priority, CalibrationTask)
            _, task = prio_task
            if task.symbol == symbol.lower() and task.tf == tf:
                found_task = task
                found_prio_tuple = prio_task
                break

        if found_task:
            log.debug(f"[put] –ó–∞–≤–¥–∞–Ω–Ω—è –≤–∂–µ —ñ—Å–Ω—É—î: {found_task}")
            # –Ø–∫—â–æ –≤–∂–µ —î —Ç–µ—Ä–º—ñ–Ω–æ–≤–µ ‚Äî –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ
            if is_urgent and not found_task.is_urgent:
                log.info(f"üÜô –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –¥–ª—è {symbol}/{tf} (—Ç–µ—Ä–º—ñ–Ω–æ–≤–µ)")
                new_task = found_task._replace(
                    priority=1.0,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Ç–µ—Ä–º—ñ–Ω–æ–≤–∏—Ö
                    is_urgent=True,
                    is_high_priority=True,
                    created_at=current_time,
                )
                # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–µ –∑–∞–≤–¥–∞–Ω–Ω—è (–∫–æ—Ä—Ç–µ–∂)
                try:
                    self._queue._queue.remove(found_prio_tuple)
                    log.debug(
                        f"[put] –í–∏–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–∏–π –∫–æ—Ä—Ç–µ–∂ –∑ —á–µ—Ä–≥–∏: {found_prio_tuple}"
                    )
                except ValueError:
                    log.error(
                        f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è {symbol}/{tf} –∑ —á–µ—Ä–≥–∏: –∫–æ—Ä—Ç–µ–∂ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
                    )
                # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è –∑ –æ–Ω–æ–≤–ª–µ–Ω–∏–º –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–æ–º
                await self._queue.put(self._calculate_priority(new_task))
                log.info(f"[put] –î–æ–¥–∞–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–µ —Ç–µ—Ä–º—ñ–Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è {symbol}/{tf}")
                return
            log.debug(f"[put] –ó–∞–≤–¥–∞–Ω–Ω—è –≤–∂–µ –≤ —á–µ—Ä–∑—ñ, –¥—É–±–ª—å –Ω–µ –¥–æ–¥–∞—î—Ç—å—Å—è")
            return  # –ó–∞–≤–¥–∞–Ω–Ω—è –≤–∂–µ –≤ —á–µ—Ä–∑—ñ, –Ω–µ –¥–æ–¥–∞—î–º–æ –¥—É–±–ª—å

        log.info(
            f"[QUEUE_PUT] –î–æ–¥–∞—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è: symbol={symbol}, tf={tf}, priority={priority}, is_urgent={is_urgent}, is_high_priority={is_high_priority}"
        )

        task = CalibrationTask(
            symbol=symbol.lower(),
            tf=tf,
            priority=priority,
            is_high_priority=is_high_priority,
            is_urgent=is_urgent,  # –î–æ–¥–∞–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä is_urgent
            created_at=time.time(),
        )

        # –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –±—É—Å—Ç –¥–ª—è —Ç–µ—Ä–º—ñ–Ω–æ–≤–∏—Ö –∑–∞–≤–¥–∞–Ω—å
        if is_urgent:
            task = task._replace(priority=min(1.0, priority + 0.3))
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–ª–∞—Å—É –∞–∫—Ç–∏–≤—ñ–≤ —Ç–∞ –¥–µ—Ñ–æ–ª—Ç—ñ–≤
        await self._queue.put(self._calculate_priority(task))
        self._metrics.inc("queue_added_urgent" if is_urgent else "queue_added")
        self._metrics.gauge("queue_size", self._queue.qsize())
        self._metrics.gauge(
            "active_workers", self._sem._value
        )  # pylint: disable=protected-access
        self._metrics.gauge("circuit_breaker_active", len(self._circuit_breaker))
        log.info(
            f"[QUEUE_PUT] –ó–∞–≤–¥–∞–Ω–Ω—è –¥–æ–¥–∞–Ω–æ —É —á–µ—Ä–≥—É: symbol={symbol}, tf={tf}, priority={priority}, is_urgent={is_urgent}, is_high_priority={is_high_priority}, queue_size={self._queue.qsize()}"
        )
        if is_high_priority:
            self._metrics.inc("high_priority_tasks")
        else:
            self._metrics.inc("normal_priority_tasks")
        # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É
        if priority > 1.0:
            log.warning("–í–∏—Å–æ–∫–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –¥–ª—è %s/%s: %.2f", symbol, tf, priority)
        else:
            log.debug("–ó–≤–∏—á–∞–π–Ω–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –¥–ª—è %s/%s: %.2f", symbol, tf, priority)
        # –õ–æ–≥—É–≤–∞–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É —á–µ—Ä–≥–∏
        log.debug("–ü–æ—Ç–æ—á–Ω–∏–π —Ä–æ–∑–º—ñ—Ä —á–µ—Ä–≥–∏: %d", self._queue.qsize())
        # –õ–æ–≥—É–≤–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –≤–æ—Ä–∫–µ—Ä—ñ–≤
        log.debug("–ü–æ—Ç–æ—á–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∏—Ö –≤–æ—Ä–∫–µ—Ä—ñ–≤: %d", self._sem._value)
        # –õ–æ–≥—É–≤–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö circuit breakers
        log.debug("–ê–∫—Ç–∏–≤–Ω—ñ circuit breakers: %d", len(self._circuit_breaker))

    async def start_workers(self, n_workers: int = 2) -> None:
        """–ó–∞–ø—É—Å–∫–∞—î –≤–æ—Ä–∫–µ—Ä–∏ –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫."""
        log.info(f"[start_workers] self._engine: {self._engine}")
        log.info(
            f"[start_workers] self._sem._value: {self._sem._value}, len(self._workers): {len(self._workers)}"
        )
        if not self._engine:
            log.error("‚ùå CalibrationEngine –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ!")
            return
        available_slots = self._sem._value - len(self._workers)
        workers_to_start = min(n_workers, available_slots)
        log.info(
            f"[start_workers] available_slots: {available_slots}, workers_to_start: {workers_to_start}"
        )
        if workers_to_start <= 0:
            log.warning(
                "–î–æ—Å—è–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–æ—Ä–∫–µ—Ä—ñ–≤: %d", self._sem._value
            )
            return
        for _ in range(workers_to_start):
            log.debug("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–æ—Ä–∫–µ—Ä–∞ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∑–∞–≤–¥–∞–Ω—å...")
            worker = asyncio.create_task(self._safe_worker(), name="CalibrationWorker")
            self._workers.append(worker)
            self._metrics.inc("active_workers")
            log.debug("–í–æ—Ä–∫–µ—Ä —Å—Ç–≤–æ—Ä–µ–Ω–æ, –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –Ω–∞ –∑–∞–ø—É—Å–∫...")
        log.info("–°—Ç–∞—Ä—Ç –≤–æ—Ä–∫–µ—Ä—ñ–≤: %d", workers_to_start)

    async def shutdown(self, timeout: float = 10.0) -> None:
        """–ö–æ—Ä–µ–∫—Ç–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å."""
        log.info("–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ —á–µ—Ä–≥–∏...")
        for worker in self._workers:
            worker.cancel()

        done, pending = await asyncio.wait(
            self._workers, timeout=timeout, return_when=asyncio.ALL_COMPLETED
        )

        if pending:
            log.warning("–ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤–æ—Ä–∫–µ—Ä—ñ–≤ –≤–∏—á–µ—Ä–ø–∞–Ω–æ")

        log.info("–ß–µ—Ä–≥–∞ –∑—É–ø–∏–Ω–µ–Ω–∞")

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –í–Ω—É—Ç—Ä—ñ—à–Ω—è –ª–æ–≥—ñ–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def _calculate_priority(
        self, task: CalibrationTask
    ) -> Tuple[float, CalibrationTask]:
        """–ê–¥–∞–ø—Ç–∏–≤–Ω–µ —Å—Ç–∞—Ä—ñ–Ω–Ω—è –∑ –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è–º –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É –¥–ª—è —Ç–µ—Ä–º—ñ–Ω–æ–≤–∏—Ö —Ç–∞ ALERT-–∞–∫—Ç–∏–≤—ñ–≤"""
        base_priority = -task.priority
        if task.is_urgent:
            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Ç–µ—Ä–º—ñ–Ω–æ–≤–∏—Ö –∑–∞–≤–¥–∞–Ω—å
            return (-100.0, task)
        wait_time = time.time() - task.created_at
        age_factor = min(wait_time * 0.05, 2.0)  # –ë—ñ–ª—å—à –∞–≥—Ä–µ—Å–∏–≤–Ω–µ —Å—Ç–∞—Ä—ñ–Ω–Ω—è
        # –ü—ñ–¥–≤–∏—â–µ–Ω–Ω—è –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É –¥–ª—è –∞–∫—Ç–∏–≤—ñ–≤ –∑ ALERT
        if hasattr(self, "alert_symbols") and task.symbol in self.alert_symbols:
            age_factor *= 1.5
        return (base_priority - age_factor, task)

    def set_alert_symbols(self, symbols):
        """–û–Ω–æ–≤–ª—é—î —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤—ñ–≤ –∑ –∞–∫—Ç–∏–≤–Ω–∏–º–∏ ALERT-—Å–∏–≥–Ω–∞–ª–∞–º–∏"""
        self.alert_symbols = set(s.lower() for s in symbols)
        log.info(f"–û–Ω–æ–≤–ª–µ–Ω–æ ALERT-—Å–∏–º–≤–æ–ª–∏: {len(self.alert_symbols)} –∞–∫—Ç–∏–≤—ñ–≤")

    def get_performance_metrics(self) -> dict:
        """–†–æ–∑—à–∏—Ä–µ–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"""
        return {
            "queue_size": self._queue.qsize(),
            "active_tasks": self._sem._value,  # pylint: disable=protected-access
            "avg_calibration_time": (
                self._metrics.get_avg("calibration_time")
                if hasattr(self._metrics, "get_avg")
                else None
            ),
            "urgent_tasks_processed": (
                self._metrics.get_count("urgent_tasks_processed")
                if hasattr(self._metrics, "get_count")
                else None
            ),
            "default_calibrations": getattr(self, "default_calib_count", 0),
            "cache_hit_rate": (
                self._metrics.get_ratio("cache_hits", "cache_attempts")
                if hasattr(self._metrics, "get_ratio")
                else None
            ),
            "failure_rate": (
                self._metrics.get_ratio("calibration_failures", "calibration_attempts")
                if hasattr(self._metrics, "get_ratio")
                else None
            ),
        }

    async def adaptive_worker_scaling(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Ä–µ–≥—É–ª—é–≤–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≤–æ—Ä–∫–µ—Ä—ñ–≤"""
        while True:
            queue_size = self._queue.qsize()
            active_workers = len(self._workers)
            if queue_size > 20 and active_workers < self.max_concurrent:
                new_workers = min(5, self.max_concurrent - active_workers)
                await self.start_workers(new_workers)
                log.info(
                    f"–î–æ–¥–∞–Ω–æ {new_workers} –≤–æ—Ä–∫–µ—Ä—ñ–≤. –ó–∞–≥–∞–ª–æ–º: {active_workers + new_workers}"
                )
            elif queue_size < 5 and active_workers > 3:
                remove_count = min(2, active_workers - 3)
                # TODO: –õ–æ–≥—ñ–∫–∞ –∑—É–ø–∏–Ω–∫–∏ –Ω–∞–¥–ª–∏—à–∫–æ–≤–∏—Ö –≤–æ—Ä–∫–µ—Ä—ñ–≤ (–º–æ–∂–Ω–∞ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —á–µ—Ä–µ–∑ cancel)
                log.info(
                    f"–ú–æ–∂–Ω–∞ –∑—É–ø–∏–Ω–∏—Ç–∏ {remove_count} –≤–æ—Ä–∫–µ—Ä—ñ–≤ (—Ä–µ–∞–ª—ñ–∑—É–π—Ç–µ –∑–∞ –ø–æ—Ç—Ä–µ–±–∏)"
                )
            await asyncio.sleep(30)

    def _calculate_ttl(self, symbol: str) -> int:
        """–í–∏–∑–Ω–∞—á–∞—î TTL –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç–∏–ø—É –∞–∫—Ç–∏–≤—É —Ç–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ"""
        asset_class = self._get_asset_class(symbol)
        volatility = self._get_symbol_volatility(symbol)

        # –ë–∞–∑–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è TTL –∑ –∫–æ–Ω—Ñ—ñ–≥—É
        base_ttl = {
            "meme": 3600,
            "ai": 5400,
            "nft": 7200,
            "defi": 10800,
            "spot": 14400,
            "futures": 18000,
        }.get(asset_class, 7200)

        # –ö–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è TTL –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ
        if volatility > 40:
            return max(
                1800, int(base_ttl * 0.5)
            )  # –°–∫–æ—Ä–æ—á—É—î–º–æ TTL –¥–ª—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–∏—Ö –∞–∫—Ç–∏–≤—ñ–≤
        elif volatility < 15:
            return min(28800, int(base_ttl * 1.5))  # –ó–±—ñ–ª—å—à—É—î–º–æ –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–∏—Ö

        return base_ttl

    async def _safe_worker(self) -> None:
        """–í–æ—Ä–∫–µ—Ä –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫ —Ç–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º–∏ —Å–ø—Ä–æ–±–∞–º–∏."""
        log.info("[safe_worker] –í–æ—Ä–∫–µ—Ä —Å—Ç–∞—Ä—Ç—É—î...")
        while True:
            # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–æ—Ç–∫–∏–π sleep –¥–ª—è –∑–≤—ñ–ª—å–Ω–µ–Ω–Ω—è –ø–æ—Ç–æ–∫—É
            await asyncio.sleep(0.01)
            log.debug("[safe_worker] –ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º worker_loop")
            await self._worker_loop()
            log.debug("üöÄ –í–æ—Ä–∫–µ—Ä –∑–∞–≤–µ—Ä—à–∏–≤ worker_loop (–º–∞—î –±—É—Ç–∏ –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–∏–π —Ü–∏–∫–ª)")

    async def _worker_loop(self) -> None:
        """–û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª –æ–±—Ä–æ–±–∫–∏ –∑–∞–≤–¥–∞–Ω—å –∑ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–æ—é –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è."""
        worker_id = id(asyncio.current_task())
        log.info(f"[worker_loop] –°—Ç–∞—Ä—Ç—É—î —Ü–∏–∫–ª –æ–±—Ä–æ–±–∫–∏ –∑–∞–≤–¥–∞–Ω—å (worker_id={worker_id})")
        last_get_time = time.time()
        while True:
            await asyncio.sleep(0)
            queue_size = self._queue.qsize()
            log.info(
                f"[worker_loop] –ü–æ—Ç–æ—á–Ω–∏–π —Ä–æ–∑–º—ñ—Ä —á–µ—Ä–≥–∏: {queue_size} (worker_id={worker_id})"
            )
            if queue_size > 0:
                log.info(
                    f"[worker_loop] –ß–µ—Ä–≥–∞ –º—ñ—Å—Ç–∏—Ç—å {queue_size} –∑–∞–≤–¥–∞–Ω—å (worker_id={worker_id})"
                )

            get_start = time.time()
            prio_task = await self._queue.get()
            get_end = time.time()
            wait_time = get_end - get_start
            if wait_time > 1.0:
                log.warning(
                    f"[worker_loop] –í–æ—Ä–∫–µ—Ä {worker_id} —á–µ–∫–∞–≤ {wait_time:.2f} —Å–µ–∫ –Ω–∞ –∑–∞–≤–¥–∞–Ω–Ω—è –∑ —á–µ—Ä–≥–∏!"
                )
            else:
                log.debug(
                    f"[worker_loop] –í–æ—Ä–∫–µ—Ä {worker_id} –æ—Ç—Ä–∏–º–∞–≤ –∑–∞–≤–¥–∞–Ω–Ω—è —á–µ—Ä–µ–∑ {wait_time:.2f} —Å–µ–∫"
                )
            log.info(
                f"[worker_loop] –û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–≤–¥–∞–Ω–Ω—è –∑ —á–µ—Ä–≥–∏: {prio_task} (worker_id={worker_id})"
            )
            _, task = prio_task
            log.debug(
                f"[worker_loop] –í–æ—Ä–∫–µ—Ä {worker_id} –æ—Ç—Ä–∏–º–∞–≤ —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è {task.symbol}/{task.tf}"
            )
            if self._engine is None:
                log.error(
                    "‚ùå CalibrationEngine –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ! (worker_id={worker_id})"
                )
                continue
            if task is None:
                log.info(
                    f"[worker_loop] –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤–æ—Ä–∫–µ—Ä–∞ (worker_id={worker_id})"
                )
                break
            symbol, tf = task.symbol, task.tf
            log.info(
                f"[worker_loop] –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–¥–∞–Ω–Ω—è: {symbol}/{tf} (prio={task.priority}) is_urgent={task.is_urgent} is_high_priority={task.is_high_priority} (worker_id={worker_id})"
            )

            if task.is_urgent:
                log.warning(
                    f"üö® [worker_loop] –¢–ï–†–ú–Ü–ù–û–í–ï –∫–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è {task.symbol}/{task.tf} (worker_id={worker_id})"
                )
                self._metrics.inc("urgent_tasks_processed")

            queue_time = time.time() - task.created_at
            self._metrics.observe("queue_time", queue_time)
            log.info(
                f"[worker_loop] –ó–∞–≤–¥–∞–Ω–Ω—è –≤ —á–µ—Ä–∑—ñ {queue_time:.2f} —Å–µ–∫ (worker_id={worker_id})"
            )

            if self._is_circuit_broken(symbol):
                log.warning(
                    f"[worker_loop] Circuit breaker –∞–∫—Ç–∏–≤–Ω–∏–π –¥–ª—è {symbol} (worker_id={worker_id})"
                )
                self._queue.task_done()
                continue

            # –ë–µ–∑–ø–µ—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ _state_manager
            if hasattr(self, "_state_manager") and self._state_manager:
                self._state_manager.update_asset(
                    task.symbol,
                    {
                        "calib_status": "in_progress",
                        "calib_started": datetime.utcnow().isoformat(),
                    },
                )
            log.debug(
                f"[worker_loop] –í–æ—Ä–∫–µ—Ä {worker_id} –æ—á—ñ–∫—É—î –Ω–∞ —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è {symbol}/{tf}"
            )

            async with self._sem:
                log.info(
                    f"[worker_loop] –í–æ—Ä–∫–µ—Ä {worker_id} –ø–æ—á–∏–Ω–∞—î –∫–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è {symbol}/{tf}"
                )
                await self._process_task(task)
                self._queue.task_done()
                self._metrics.observe("queue_time", time.time() - task.created_at)

    async def _process_task(self, task: CalibrationTask) -> None:
        """–û–±—Ä–æ–±–∫–∞ –æ–¥–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è –∫–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è –∑ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–æ—é —Ç–∞ –¥–µ—Ç–∞–ª—å–Ω–∏–º –ª–æ–≥—É–≤–∞–Ω–Ω—è–º"""
        symbol, tf = task.symbol, task.tf
        log.info(
            f"[CALIB_WORKER] ‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç –∫–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è {symbol}/{tf} (prio={task.priority}, urgent={task.is_urgent}, high={task.is_high_priority})"
        )
        processing_start = time.time()  # –î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∏–Ω–∞–º—ñ—á–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –∑ –∞–¥–∞–ø—Ç–∏–≤–Ω–∏–º TTL
        params = self._get_dynamic_params(symbol, task.is_high_priority)
        params["result_ttl"] = self._calculate_ttl(symbol)
        log.info(f"[CALIB_WORKER] –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∫–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è –¥–ª—è {symbol}/{tf}: {params}")

        if task.is_urgent:
            # –®–≤–∏–¥–∫–∏–π —Ä–µ–∂–∏–º –¥–ª—è ALERT
            params["n_trials"] = max(15, params["n_trials"] // 2)
            params["lookback_days"] = max(10, params["lookback_days"] // 2)
            log.warning(
                f"[CALIB_WORKER] üö® –¢–ï–†–ú–Ü–ù–û–í–ò–ô –†–ï–ñ–ò–ú: {task.symbol} (n_trials={params['n_trials']})"
            )

        # –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è
        log.info(f"[CALIB_WORKER] –í–∏–∫–ª–∏–∫ calibrate_symbol_timeframe –¥–ª—è {symbol}/{tf}")
        try:
            result = await self._engine.calibrate_symbol_timeframe(
                symbol=symbol,
                timeframe=tf,
                date_from=datetime.utcnow() - timedelta(days=params["lookback_days"]),
                date_to=datetime.utcnow(),
                n_trials=params["n_trials"],
                config_template=None,
                override_old=False,
            )
            log.info(
                f"[CALIB_WORKER] ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ calibrate_symbol_timeframe –¥–ª—è {symbol}/{tf}"
            )
        except Exception as e:
            log.error(
                f"[CALIB_WORKER] ‚ùå –ü–æ–º–∏–ª–∫–∞ calibrate_symbol_timeframe –¥–ª—è {symbol}/{tf}: {e}"
            )
            self._metrics.inc("calibration_failures")
            if hasattr(self, "_state_manager") and self._state_manager:
                self._state_manager.update_asset(
                    symbol,
                    {"calib_status": "failed", "calib_error": str(e)},
                )
            raise

        log.info(f"[CALIB_WORKER] –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è –¥–ª—è {symbol}/{tf}: {result}")
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –∫–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è
        if not isinstance(result, dict):
            log.error(
                f"[CALIB_WORKER] {symbol} –ö–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è –ø–æ–≤–µ—Ä–Ω—É–ª–æ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}"
            )
            self._metrics.inc("calibration_invalid_results")
            result = None

        if result is None:
            log.error(f"[CALIB_WORKER] –ö–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è –¥–ª—è {symbol}/{tf}")
            self._metrics.inc("calibration_failures")
            if hasattr(self, "_state_manager") and self._state_manager:
                self._state_manager.update_asset(
                    symbol,
                    {"calib_status": "failed", "calib_error": "calibration_failed"},
                )
            raise RuntimeError(f"–ö–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è –¥–ª—è {symbol}/{tf}")

        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É –∑ –∞–¥–∞–ø—Ç–∏–≤–Ω–∏–º TTL
        log.info(f"[CALIB_WORKER] –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É –¥–ª—è {symbol}/{tf}")
        await self._cache.set_json(
            symbol,
            tf,
            result,
            ttl=params["result_ttl"],
            prefix="calib",
        )

        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        if hasattr(self, "_state_manager") and self._state_manager:
            log.info(f"Updating state for {symbol} to 'completed'")
            self._state_manager.update_asset(
                symbol,
                {
                    "calib_status": "completed",
                    "last_calib": datetime.utcnow().isoformat(),
                    "calib_params": result,
                },
            )

        # –ó–∞–ø–∏—Å –º–µ—Ç—Ä–∏–∫
        calibration_time = time.time() - processing_start
        self._metrics.observe("calibration_time", calibration_time)
        self._metrics.gauge(f"calib_{symbol}_status", 1)
        log.info(
            f"[CALIB_WORKER] ‚úÖ –£—Å–ø—ñ—à–Ω–æ: {symbol}/{tf} (—á–∞—Å: {calibration_time:.2f} —Å–µ–∫)"
        )

    async def _handle_task_failure(
        self, task: CalibrationTask, error: Exception
    ) -> None:
        """–û–±—Ä–æ–±–∫–∞ –Ω–µ–≤–¥–∞–ª–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è."""
        symbol, tf = task.symbol, task.tf
        log.error("–ü–æ–º–∏–ª–∫–∞ %s/%s: %s", symbol, tf, error)
        self._metrics.inc("calibration_errors")

        # –õ–æ–≥—ñ–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó —Å–ø—Ä–æ–±–∏
        if task.attempts < MAX_ATTEMPTS:
            new_task = task._replace(
                attempts=task.attempts + 1,
                created_at=time.time() + (2**task.attempts),  # Exponential backoff
            )
            await self._queue.put(self._calculate_priority(new_task))
            self._metrics.inc("queue_retries")
            log.debug("–ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ #%d: %s/%s", new_task.attempts, symbol, tf)
        else:
            self._trigger_circuit_breaker(symbol)
            log.error("–î–æ—Å—è–≥–Ω—É—Ç–æ –º–∞–∫—Å. —Å–ø—Ä–æ–± –¥–ª—è %s. Circuit breaker –∞–∫—Ç–∏–≤–Ω–∏–π", symbol)

    def _get_dynamic_params(
        self, symbol: str, is_high_priority: bool = False, is_urgent: bool = False
    ) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä—É—î –¥–∏–Ω–∞–º—ñ—á–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∫–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ:
        - –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó —Å–∏—Å—Ç–µ–º–∏
        - –¢–∏–ø—É –∞–∫—Ç–∏–≤—É
        - –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ
        - –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É –∑–∞–≤–¥–∞–Ω–Ω—è
        """
        # –ë–∞–∑–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑ –∫–æ–Ω—Ñ—ñ–≥—É
        base_config = {
            "lookback_days": self.config.lookback_days,
            "n_trials": self.config.n_trials,
            "result_ttl": self._calculate_ttl(symbol),
        }

        # –û—Ç—Ä–∏–º—É—î–º–æ –∫–ª–∞—Å –∞–∫—Ç–∏–≤—É –¥–ª—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó –∞–¥–∞–ø—Ç–∞—Ü—ñ—ó
        asset_class = self._get_asset_class(symbol)

        # –ê–¥–∞–ø—Ç–∞—Ü—ñ—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É –∑–∞–≤–¥–∞–Ω–Ω—è
        if is_urgent:
            # –®–≤–∏–¥–∫–∏–π —Ä–µ–∂–∏–º –¥–ª—è —Ç–µ—Ä–º—ñ–Ω–æ–≤–∏—Ö –∑–∞–≤–¥–∞–Ω—å
            base_config.update(
                {
                    "n_trials": max(15, int(self.config.n_trials * 0.6)),
                    "lookback_days": max(10, int(self.config.lookback_days * 0.7)),
                }
            )
        elif is_high_priority:
            # –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π —Ä–µ–∂–∏–º –¥–ª—è –≤–∏—Å–æ–∫–æ–ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å
            base_config.update(
                {
                    "n_trials": int(self.config.n_trials * 0.8),
                    "lookback_days": int(self.config.lookback_days * 0.9),
                }
            )

        # –ê–¥–∞–ø—Ç–∞—Ü—ñ—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ
        volatility = self._get_symbol_volatility(symbol)
        base_config = self._adjust_params_by_volatility(base_config, volatility)

        # –ê–¥–∞–ø—Ç–∞—Ü—ñ—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–ª–∞—Å—É –∞–∫—Ç–∏–≤—É
        if asset_class == "meme":
            base_config["n_trials"] = min(30, base_config["n_trials"])
            base_config["lookback_days"] = min(15, base_config["lookback_days"])
        elif asset_class == "stable":
            base_config["n_trials"] = max(10, int(base_config["n_trials"] * 0.5))

        return base_config

    def _adjust_params_by_volatility(
        self, params: Dict[str, Any], volatility: float
    ) -> Dict[str, Any]:
        """–ê–¥–∞–ø—Ç—É—î –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∫–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ"""
        adjusted = params.copy()

        if volatility > 50:  # –í–∏—Å–æ–∫–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å
            adjusted.update(
                {
                    "n_trials": min(60, int(params["n_trials"] * 1.5)),
                    "lookback_days": max(7, int(params["lookback_days"] * 0.7)),
                }
            )
        elif volatility > 30:  # –°–µ—Ä–µ–¥–Ω—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å
            adjusted.update({"n_trials": min(45, int(params["n_trials"] * 1.2))})
        elif volatility < 10:  # –ù–∏–∑—å–∫–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å
            adjusted.update(
                {
                    "n_trials": max(10, int(params["n_trials"] * 0.8)),
                    "lookback_days": min(60, int(params["lookback_days"] * 1.3)),
                }
            )

        return adjusted

    def _get_symbol_volatility(self, symbol: str) -> float:
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ —Å–∏–º–≤–æ–ª—É (—Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ –¥–∂–µ—Ä–µ–ª–∞ –¥–∞–Ω–∏—Ö)"""
        # TODO: –Ü–Ω—Ç–µ–≥—Ä—É–≤–∞—Ç–∏ –∑ —Ä–µ–∞–ª—å–Ω–∏–º –¥–∂–µ—Ä–µ–ª–æ–º –¥–∞–Ω–∏—Ö
        # –¢–∏–º—á–∞—Å–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–ª–∞—Å—É –∞–∫—Ç–∏–≤—É
        asset_class = self._get_asset_class(symbol)
        volatility_map = {
            "meme": 45.0,
            "ai": 35.0,
            "nft": 30.0,
            "defi": 25.0,
            "spot": 20.0,
            "futures": 40.0,
            "stable": 5.0,
        }
        return volatility_map.get(asset_class, 25.0)

    def _is_circuit_broken(self, symbol: str) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –∞–∫—Ç–∏–≤–Ω–∏–π circuit breaker –¥–ª—è —Å–∏–º–≤–æ–ª—É."""
        expiry = self._circuit_breaker.get(symbol, 0)
        return time.time() < expiry

    def _trigger_circuit_breaker(self, symbol: str) -> None:
        """–ê–∫—Ç–∏–≤—É—î circuit breaker –¥–ª—è —Å–∏–º–≤–æ–ª—É."""
        self._circuit_breaker[symbol] = time.time() + CIRCUIT_BREAKER_TIMEOUT
        log.warning("Circuit breaker –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –¥–ª—è %s", symbol)

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –£—Ç–∏–ª—ñ—Ç–∏ —Ç–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    @staticmethod
    def _redis_key(symbol: str, tf: str) -> str:
        return f"calib:{symbol}:{tf}"

    async def get_cached(self, symbol: str, tf: str) -> Optional[Dict[str, Any]]:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –∫–µ—à –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—é —ñ–Ω–≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é."""
        redis_key = self._redis_key(symbol, tf)
        if cached := await self._cache.fetch_from_cache(
            symbol, "", prefix="calib", raw=False  # –ø–æ—Ä–æ–∂–Ω—ñ–π interval
        ):
            self._metrics.inc("cache_hits")
            return cached

        self._metrics.inc("cache_misses")
        return None

    async def await_result(
        self,
        symbol: str,
        tf: str,
        timeout: float = 15.0,
    ) -> Optional[Dict[str, Any]]:
        """–û—á—ñ–∫—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑ Pub/Sub —Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º."""
        redis_key = self._redis_key(symbol, tf)
        start_time = time.time()

        while (time.time() - start_time) < timeout:
            if result := await self.get_cached(symbol, tf):
                return result

            # Fallback polling
            await asyncio.sleep(0.5)

        log.warning("–¢–∞–π–º–∞—É—Ç –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –¥–ª—è %s/%s", symbol, tf)
        return None

    async def wait_until_empty(self, timeout: float = 30.0) -> bool:
        """–û—á—ñ–∫—É—î –ø–æ—Ä–æ–∂–Ω—å–æ—ó —á–µ—Ä–≥–∏ –∑ —Ç–∞–π–º–∞—É—Ç–æ–º."""
        try:
            await asyncio.wait_for(self._queue.join(), timeout)
            return True
        except asyncio.TimeoutError:
            return False

    async def get_queue_size(self) -> int:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ç–æ—á–Ω–∏–π —Ä–æ–∑–º—ñ—Ä —á–µ—Ä–≥–∏."""
        return self._queue.qsize()

    async def get_active_workers(self) -> int:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∏—Ö –≤–æ—Ä–∫–µ—Ä—ñ–≤."""
        return self._sem._value  # pylint: disable=protected-access

    def get_metrics(self) -> Dict[str, float]:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ç–æ—á–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ."""
        return self._metrics.collect()
