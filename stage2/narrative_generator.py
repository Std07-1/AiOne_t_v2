# stage2\narrative_generator.py
"""
–ú–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç—Ä–µ–π–¥–µ—Ä—Å—å–∫–æ–≥–æ –Ω–∞—Ä—Ä–∞—Ç–∏–≤—É Stage2.
–í–∫–ª—é—á–∞—î —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å—É —Ä–∏–Ω–∫–æ–≤–æ—ó —Å–∏—Ç—É–∞—Ü—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É, –∞–Ω–æ–º–∞–ª—ñ–π —Ç–∞ —Ç—Ä–∏–≥–µ—Ä—ñ–≤.
"""

import logging
from rich.console import Console
from rich.logging import RichHandler
from typing import Dict, Any, List, Optional
from .config_NLP import SCENARIO_MAP, TRIGGER_NAMES

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger("stage2.narrative_generator")
logger.setLevel(logging.INFO)
handler = RichHandler(console=Console(stderr=True), show_path=False)
logger.handlers.clear()
logger.addHandler(handler)
logger.propagate = False


def _generate_trader_narrative(
    context: Dict[str, Any],
    anomalies: Dict[str, bool],
    triggers: List[str],
    stats: Optional[Dict[str, Any]] = None,
) -> str:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç—Ä–µ–π–¥–µ—Ä—Å—å–∫–æ–≥–æ –Ω–∞—Ä—Ä–∞—Ç–∏–≤—É —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.
    Args:
        context (dict): –†–∏–Ω–∫–æ–≤–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç.
        anomalies (dict): –û–∑–Ω–∞–∫–∏ –∞–Ω–æ–º–∞–ª—ñ–π.
        triggers (list): –°–ø–∏—Å–æ–∫ —Ç—Ä–∏–≥–µ—Ä—ñ–≤.
        stats (dict): –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∏–Ω–∫—É (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ).
    Returns:
        str: –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç–æ–≤–∏–π –Ω–∞—Ä—Ä–∞—Ç–∏–≤.
    """
    narrative = []
    symbol = context.get("symbol", "–∞–∫—Ç–∏–≤—É")

    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Ü—ñ–Ω—É –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∞–±–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    current_price = context.get("current_price")
    if not current_price and stats:
        current_price = stats.get("current_price", 0)
    current_price = current_price or 0

    # –ë–∞–∑–æ–≤–∏–π —Å—Ü–µ–Ω–∞—Ä—ñ–π
    scenario = context["scenario"]
    scenario_text = SCENARIO_MAP.get(scenario, SCENARIO_MAP["DEFAULT"]).format(
        symbol=symbol
    )
    narrative.append(scenario_text)

    # –ö–ª—é—á–æ–≤—ñ —Ä—ñ–≤–Ω—ñ
    levels = context["key_levels"]
    support = levels.get("immediate_support")
    resistance = levels.get("immediate_resistance")

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ä—ñ–≤–Ω—ñ–≤
    if support is None or resistance is None:
        narrative.append("–ö–ª—é—á–æ–≤—ñ —Ä—ñ–≤–Ω—ñ –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω—ñ.")
    else:
        # –ü—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤—ñ–¥—Å—Ç–∞–Ω–µ–π —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö
        dist_to_support = (
            ((current_price - support) / support * 100)
            if support and support > 0
            else 0
        )
        dist_to_resistance = (
            ((resistance - current_price) / resistance * 100)
            if resistance and resistance > 0
            else 0
        )

        # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ä—è–¥–∫–∞ –∑ —Ä—ñ–≤–Ω—è–º–∏
        levels_info = [
            f"–ù–∞–π–±–ª–∏–∂—á–∏–π —Ä—ñ–≤–µ–Ω—å –ø—ñ–¥—Ç—Ä–∏–º–∫–∏: {support:.4f}",
            (
                f"–î–∏—Å—Ç–∞–Ω—Ü—ñ—è: {abs(dist_to_support):.2f}% {'–Ω–∏–∂—á–µ' if dist_to_support > 0 else '–≤–∏—â–µ'}"
                if support
                else ""
            ),
            f"–ù–∞–π–±–ª–∏–∂—á–∏–π —Ä—ñ–≤–µ–Ω—å –æ–ø–æ—Ä—É: {resistance:.4f}",
            (
                f"–î–∏—Å—Ç–∞–Ω—Ü—ñ—è: {abs(dist_to_resistance):.2f}% {'–≤–∏—â–µ' if dist_to_resistance > 0 else '–Ω–∏–∂—á–µ'}"
                if resistance
                else ""
            ),
        ]
        narrative.append(" ".join([item for item in levels_info if item]))

        # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –¥–ª—è RANGE_BOUND
        if scenario == "RANGE_BOUND":
            range_info = []
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–ª–∏–∑—å–∫–æ—Å—Ç—ñ –¥–æ —Ä—ñ–≤–Ω—ñ–≤
            if abs(dist_to_support) < 1:
                range_info.append("–¶—ñ–Ω–∞ –±–ª–∏–∑—å–∫–æ –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ - –º–æ–∂–ª–∏–≤–∏–π –≤—ñ–¥—Å–∫–æ–∫")
            elif abs(dist_to_resistance) < 1:
                range_info.append("–¶—ñ–Ω–∞ –±–ª–∏–∑—å–∫–æ –¥–æ –æ–ø–æ—Ä—É - –º–æ–∂–ª–∏–≤–∏–π –≤—ñ–¥–±—ñ–π")

            # –ê–Ω–∞–ª—ñ–∑ —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ –∫–æ–Ω—Å–æ–ª—ñ–¥–∞—Ü—ñ—ó
            if stats:
                consolidation_days = stats.get("consolidation_days", 0)
                if consolidation_days > 3:
                    range_info.append(f"–ö–æ–Ω—Å–æ–ª—ñ–¥–∞—Ü—ñ—è —Ç—Ä–∏–≤–∞—î {consolidation_days} –¥–Ω—ñ–≤")

                # –ê–Ω–∞–ª—ñ–∑ –∑–≤—É–∂–µ–Ω–Ω—è –¥—ñ–∞–ø–∞–∑–æ–Ω—É
                range_narrowing = stats.get("range_narrowing_ratio", 0)
                if range_narrowing > 0.7:
                    range_info.append("–î—ñ–∞–ø–∞–∑–æ–Ω –∑–≤—É–∂—É—î—Ç—å—Å—è - –æ—á—ñ–∫—É–π—Ç–µ –ø—Ä–æ–±–æ—é")

            if range_info:
                narrative.append(" | ".join(range_info))

    # –ô–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç—ñ
    breakout_prob = context.get("breakout_probability", 0)
    pullback_prob = context.get("pullback_probability", 0)

    if breakout_prob > 0.7:
        narrative.append(f"–í–∏—Å–æ–∫–∞ –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –ø—Ä–æ–±–æ—é (>70%) —Ä—ñ–≤–Ω—è {resistance:.4f}")
    elif pullback_prob > 0.6:
        narrative.append(f"–Ü–º–æ–≤—ñ—Ä–Ω–∏–π –≤—ñ–¥—Å–∫–æ–∫ (>60%) –≤—ñ–¥ —Ä—ñ–≤–Ω—è {support:.4f}")
    elif breakout_prob < 0.3 and pullback_prob < 0.3:
        narrative.append("–ù–µ–≤–∏–∑–Ω–∞—á–µ–Ω—ñ—Å—Ç—å: –Ω–∏–∑—å–∫–∞ –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å —è–∫ –ø—Ä–æ–±–æ—é, —Ç–∞–∫ —ñ –≤—ñ–¥—Å–∫–æ–∫—É")

    # –¢—Ä–∏–≥–µ—Ä–∏
    if triggers:
        readable_triggers = [
            TRIGGER_NAMES.get(t, t)
            for t in triggers
            if t in TRIGGER_NAMES or "_calibrated" in t
        ]
        if readable_triggers:
            narrative.append(f"üîî –ö–ª—é—á–æ–≤—ñ —Ç—Ä–∏–≥–µ—Ä–∏: {', '.join(readable_triggers)}")

    # –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–æ –∞–Ω–æ–º–∞–ª—ñ—ó
    if anomalies.get("suspected_manipulation", False):
        narrative.append("‚ö†Ô∏è –£–í–ê–ì–ê: –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω—ñ –æ–∑–Ω–∞–∫–∏ –º–∞–Ω—ñ–ø—É–ª—è—Ü—ñ—ó –æ–±—Å—è–≥–∞–º–∏")
    if anomalies.get("liquidity_issues", False):
        narrative.append("‚ö†Ô∏è –û–ë–ï–†–ï–ñ–ù–û: –Ω–∏–∑—å–∫–∞ –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å –º–æ–∂–µ –ø–æ—Å–∏–ª–∏—Ç–∏ –∫–æ–ª–∏–≤–∞–Ω–Ω—è")
    if anomalies.get("unusual_volume_pattern", False):
        narrative.append("‚ö†Ô∏è –ù–ï–ó–í–ò–ß–ù–ê –ê–ù–û–ú–ê–õ–Ü–Ø: –ø—ñ–¥–æ–∑—Ä—ñ–ª–∏–π –ø–∞—Ç–µ—Ä–Ω –æ–±—Å—è–≥—ñ–≤")

    # –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –∞–Ω–∞–ª—ñ–∑ –∫–ª–∞—Å—Ç–µ—Ä—ñ–≤
    if stats:
        cluster_factors = stats.get("cluster_factors", [])
        if cluster_factors:
            positive_factors = sum(
                1 for f in cluster_factors if f.get("impact") == "positive"
            )
            total_factors = len(cluster_factors)
            if total_factors > 0:
                cluster_confidence = positive_factors / total_factors * 100
                narrative.append(
                    f"üìä –ö–ª–∞—Å—Ç–µ—Ä–Ω–∏–π –∞–Ω–∞–ª—ñ–∑: {cluster_confidence:.1f}% –ø–æ–∑–∏—Ç–∏–≤–Ω–∏—Ö —Ñ–∞–∫—Ç–æ—Ä—ñ–≤ "
                    f"({positive_factors}/{total_factors})"
                )

    return "\n".join(narrative)
