# monitor/asset_monitor/ui_consumer.py

import sys
import logging
import asyncio
from typing import Any, Dict, List

from rich.console import Console
from rich.logging import RichHandler

from rich.live import Live
from rich.table import Table
from rich import box

from stage1.utils import format_volume_usd, format_open_interest

# –û–∫—Ä–µ–º–∞ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è Live-—Ç–∞–±–ª–∏—Ü—ñ (stdout)
ui_console = Console(stderr=False)   

# –û–∫—Ä–µ–º–∏–π –ª–æ–≥–µ—Ä –¥–ª—è ui_consumer
ui_logger = logging.getLogger("ui_consumer")
ui_logger.setLevel(logging.WARNING)  # –ª–æ–≥—É—é—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ WARNING —ñ –≤–∏—â–µ
ui_logger.addHandler(
    RichHandler(console=Console(stderr=True), level="WARNING")
)
ui_logger.propagate = False          # —â–æ–± –Ω–µ –¥—É–±–ª—é–≤–∞—Ç–∏ –ª–æ–≥–∏ —É root-logger


class UI_Consumer:
    def __init__(
        self,
        vol_z_threshold: float = 2.0,
        # –Ω–∏–∂–Ω—ñ–π –ø–æ—Ä—ñ–≥ ATR —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö (ATR/price)
        low_atr_threshold: float = 0.005,  # 0.5% —Ü—ñ–Ω–∏
    ):
        """
        :param vol_z_threshold: Z-–ø–æ—Ä—ñ–≥ –¥–ª—è –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è –∞–Ω–æ–º–∞–ª—å–Ω–æ–≥–æ –æ–±—Å—è–≥—É (volume_z)
        :param low_atr_threshold: –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –≤—ñ–¥–Ω–æ—Å–Ω–∏–π ATR –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó —Å–∏–≥–Ω–∞–ª—É (—É —á–∞—Å—Ç–∫–∞—Ö —Ü—ñ–Ω–∏)
        """
        self.vol_z_threshold = vol_z_threshold
        self.low_atr_threshold = low_atr_threshold

        
    async def ui_consumer(
        self,
        queue: asyncio.Queue,       
        refresh_rate: float = 0.5,  
        loading_delay: float = 5.0,
        smooth_delay: float = 0.4,
    ):
        """
        –û—Å–Ω–æ–≤–Ω–∏–π live-—Ä–µ–Ω–¥–µ—Ä —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:
            - –ó–∞—á–µ–∫–∞—î `loading_delay` –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º.
            - –ß–∏—Ç–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑ —á–µ—Ä–≥–∏, –±—É–¥—É—î —Ç–∞ –æ–Ω–æ–≤–ª—é—î —Ç–∞–±–ª–∏—Ü—é —Å–∏–≥–Ω–∞–ª—ñ–≤ —É Live‚Äë—Ä–µ–∂–∏–º—ñ (stdout).
            - –õ–æ–≥–∏ –∑ ui_consumer (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ø–æ–º–∏–ª–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥—É, –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –≤—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ) –≤–∏–≤–æ–¥—è—Ç—å—Å—è —É stderr —á–µ—Ä–µ–∑ –æ–∫—Ä–µ–º–∏–π RichHandler.
            - –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:
                :param queue: –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —á–µ—Ä–≥–∞ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
                :param refresh_rate: —á–∞—Å—Ç–æ—Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è Live‚Äë—Ç–∞–±–ª–∏—Ü—ñ (—Ä–∞–∑/—Å–µ–∫)
                :param loading_delay: –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º Live‚Äë—Ä–µ–Ω–¥–µ—Ä–∞
                :param smooth_delay: –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π —Ç–∞–π–º—ñ–Ω–≥ –∑–≥–ª–∞–¥–∂—É–≤–∞–Ω–Ω—è (–¥–ª—è –¥–µ–±–∞–≥—É)
        """
        # –∑–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ—á–∞—Ç–∫–æ–º —Ä–µ–Ω–¥–µ—Ä–∞ (–Ω–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —á–µ—Ä–≥–∏
        last_results: List[Dict[str, Any]] = []
        
        # –∑–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ—á–∞—Ç–∫–æ–º —Ä–µ–Ω–¥–µ—Ä–∞
        await asyncio.sleep(loading_delay)  

        # Live-–∫–æ–Ω—Ç–µ–∫—Å—Ç: spinner + –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ
        with Live(
            self._build_signal_table([], loading=True),
            console=ui_console,                          # Live‚Äë—Ç–∞–±–ª–∏—Ü—è —Ç—ñ–ª—å–∫–∏ —É stdout
            refresh_per_second=refresh_rate,
            screen=False,                                # –∑–∞—Ç–∏—Ä–∞—î —Ç—ñ–ª—å–∫–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –±–ª–æ–∫
            transient=False,                             # –∑–∞–ª–∏—à–∞—î –æ—Å—Ç–∞–Ω–Ω—ñ–π —Å—Ç–∞–Ω —Ç–∞–±–ª–∏—Ü—ñ
            redirect_stderr=False                        # stderr –ù–ï –∑–∞—Ö–æ–ø–ª—é—î—Ç—å—Å—è
            
        ) as live:
            ui_logger.info("UI started")

            while True:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –Ω–æ–≤—ñ –¥–∞–Ω—ñ —É —á–µ—Ä–∑—ñ
                try:
                    new = queue.get_nowait()
                    last_results = new

                except asyncio.QueueEmpty:
                    pass
                
                # –§–æ—Ä–º—É—î–º–æ —Ç–∞–±–ª–∏—Ü—é –∑ –¥–∞–Ω–∏–º–∏ –∞–±–æ spinner, —è–∫—â–æ —â–µ –Ω–µ–º–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
                loading = not bool(last_results)
                table = self._build_signal_table(last_results, loading=loading)

                # –û–Ω–æ–≤–ª—é—î–º–æ Live-–∑–æ–Ω—É ‚Äî Rich —Å–∞–º –æ—á–∏—Å—Ç–∏—Ç—å –µ–∫—Ä–∞–Ω
                live.update(table)    # –ø–µ—Ä–µ–∑–∞–ø–∏—Å—É—î –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ä–µ–Ω–¥–µ—Ä
                
                # –ø–ª–∞–≤–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏
                await asyncio.sleep(smooth_delay)  

                # –ß–µ–∫–∞—î–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
                await asyncio.sleep(refresh_rate)
        

    def _build_signal_table(
        self,
        results: List[dict],
        loading: bool = False,
    ) -> Table:
        """
        –ë—É–¥—É—î —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î Rich.Table –∑—ñ —Å–ø–∏—Å–∫—É —Å–∏–≥–Ω–∞–ª—ñ–≤ —Ä–∞–∑–æ–º —ñ–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é
        –≤ –∑–∞–≥–æ–ª–æ–≤–∫—É. –ë–µ–∑ –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö console.print ‚Äî –≤—Å—è –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –≤ –º–µ–∂–∞—Ö —Å–∞–º–æ—ó —Ç–∞–±–ª–∏—Ü—ñ.
        """
        # ‚îÄ‚îÄ‚îÄ –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–¥—Ä–∞–∑—É ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        anomaly_count = 0
        warning_count = 0
        total = len(results)

        # ‚îÄ‚îÄ‚îÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Ç–∞–±–ª–∏—Ü—é ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ø–æ–≤–Ω—é—î–º–æ –º—ñ—Å—Ü–µ–º –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –ø–æ–∫–∏ —â–æ –±–µ–∑ —á–∏—Å–µ–ª
        title = "–°–∏–≥–Ω–∞–ª–∏ –ø–æ –∞–∫—Ç–∏–≤–∞–º"
        table = Table(title=title, box=box.SIMPLE_HEAVY)

        # ‚îÄ‚îÄ‚îÄ –î–æ–¥–∞—î–º–æ –∫–æ–ª–æ–Ω–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        headers = [
            ("–°–∏–º–≤–æ–ª", "cyan", "left"),
            ("–¶—ñ–Ω–∞",     None,   "right"),
            ("–û–±—Å—è–≥",    None,   "right"),
            ("OI",       None,   "right"),
            ("RSI",      None,   "right"),
            ("ATR%",     None,   "right"),
            ("RS",       None,   "right"),
            ("Corr",     None,   "right"),
            ("–ê–Ω–æ–º.",    None,   "center"),
            ("‚ùó",       None,   "center"),
            ("–°—Ç–∞—Ç—É—Å",   None,   "center"),
            ("–ü—Ä–∏—á–∏–Ω–∏",  None,   "left"),
            ("S2",       None,   "center"),       # Stage2: long/short
            ("–°—Ü–µ–Ω–∞—Ä—ñ–π", None,   "left"),
            ("TP",       None,   "right"),
            ("SL",       None,   "right"),
        ]
        for h, style, justify in headers:
            table.add_column(h, style=style or "", justify=justify or "left")

        # ‚îÄ‚îÄ‚îÄ Spinner –ø–æ–∫–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        if loading:
            table.add_row("[cyan]üîÑ –ê–Ω–∞–ª—ñ–∑—É—é‚Ä¶[/]", *[""] * (len(table.columns) - 1))
            return table

        # ‚îÄ‚îÄ‚îÄ –Ø–∫—â–æ –Ω–µ–º–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        if total == 0:
            table.add_row(*["‚Äî"] * (len(table.columns) - 1), "[green]–ù–µ–º–∞—î —Å–∏–≥–Ω–∞–ª—ñ–≤[/]")
            # –û–Ω–æ–≤–∏–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —ñ–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é (0/0)
            table.title = f"{title}  |  –ê–Ω–æ–º–∞–ª—ñ—ó: 0/0  Warnings: 0/0"
            return table

        # ‚îÄ‚îÄ‚îÄ –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–µ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        def priority_key(r: dict) -> tuple:
            stats   = r["stats"]
            reasons = set(r["trigger_reasons"])
            is_alert= r["signal"] == "ALERT"
            anomaly = stats.get("volume_z", 0.0) >= self.vol_z_threshold
            warning = (not is_alert) and bool(reasons)
            # –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó 0‚Äì4‚Ä¶
            if is_alert and "volume_spike" in reasons: cat = 0
            elif is_alert:                           cat = 1
            elif anomaly:                            cat = 2
            elif warning:                            cat = 3
            else:                                    cat = 4
            return (cat, -stats.get("volume_mean", 0.0))

        sorted_results = sorted(results, key=priority_key)

        # ‚îÄ‚îÄ‚îÄ –î–æ–¥–∞—î–º–æ —Ä—è–¥–∫–∏ —Ç–∞ —Ä–∞—Ö—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        for r in sorted_results:
            s = r["stats"]
            is_alert    = r["signal"] == "ALERT"
            anomaly     = s.get("volume_z", 0.0) >= self.vol_z_threshold
            warning_flag= "‚ùó" if (not is_alert and r["trigger_reasons"]) else ""
            anomaly_cell= "‚úÖ" if anomaly else ""

            # 1) —á–∏—Å–ª–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
            price_val = s.get("current_price", 0.0)
            atr_val   = s.get("atr", 0.0)

            # 2) —Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω—ñ —Ä—è–¥–∫–∏
            price = f"{price_val:.4f}"
            # ATR% –≤—ñ–¥ —Ü—ñ–Ω–∏
            atr_pct = (atr_val / price_val) if price_val else 0.0
            atr_pct_str = f"{atr_pct*100:.2f}%"
            if atr_pct < self.low_atr_threshold:
                atr_pct_str = f"[bold red]{atr_pct_str}[/]"

            vol = format_volume_usd(s.get("volume_mean", 0.0))
            oi  = "-"
            if isinstance(s.get("open_interest"), (int, float)):
                oi = format_open_interest(s["open_interest"])

            rsi_str  = f"{s.get('rsi'):.1f}" if isinstance(s.get("rsi"), (int, float)) else "-"
            rs_str   = f"{s.get('rel_strength'):.4f}" if isinstance(s.get("rel_strength"), (int, float)) else "-"
            corr_str = f"{s.get('btc_dependency_score'):.2f}" if isinstance(s.get("btc_dependency_score"), (int, float)) else "-"

            sig_text  = "üî¥ ALERT" if is_alert else "üü¢ NORMAL"
            sig_style = "bold red" if is_alert else "bold green"

            tags = []
            for reason in r["trigger_reasons"]:
                if reason == "volume_spike":
                    tags.append("[magenta]–°–ø–ª–µ—Å–∫ –æ–±—Å—è–≥—É[/]")
                else:
                    tags.append(f"[yellow]{reason}[/]")
            reasons = "  ".join(tags) or "-"

            # –ó–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏
            anomaly_count += int(anomaly)
            warning_count += int(bool(warning_flag))
            
            # –æ—Ç—Ä–∏–º—É—î–º–æ Stage2-—Å–∏–≥–Ω–∞–ª —ñ —Å—Ü–µ–Ω–∞—Ä—ñ–π
            stage2 = r.get("stage2", "-")
            if stage2 == "long":
                stage2 = "[green]LONG[/]"
            elif stage2 == "short":
                stage2 = "[red]SHORT[/]"
            else:
                stage2 = "-"
            
            scenario = r.get("scenario", "-")
            scenario = f"[magenta]{scenario}[/]"
            
            # –§–æ—Ä–º–∞—Ç—É—î–º–æ TP/SL, —è–∫—â–æ —î ‚Äî —ñ–Ω–∞–∫—à–µ —Å—Ç–∞–≤–∏–º–æ "-"
            tp = f"{r.get('tp'):.4f}" if r.get("tp") is not None else "-"
            sl = f"{r.get('sl'):.4f}" if r.get("sl") is not None else "-"

            table.add_row(
                r["symbol"],      # –°–∏–º–≤–æ–ª
                price,            # –¶—ñ–Ω–∞
                vol,              # –û–±—Å—è–≥
                oi,               # OI

                rsi_str,          # RSI
                atr_pct_str,      # ATR%

                rs_str,           # RS
                corr_str,         # Corr

                anomaly_cell,     # –ê–Ω–æ–º.
                warning_flag,     # ‚ùó

                f"[{sig_style}]{sig_text}[/]",  # –°—Ç–∞—Ç—É—Å
                reasons,          # –ü—Ä–∏—á–∏–Ω–∏

                stage2,           # S2
                scenario,         # –°—Ü–µ–Ω–∞—Ä—ñ–π
                tp,               # TP
                sl                # SL
            )

        # ‚îÄ‚îÄ‚îÄ –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —ñ–∑ –ø—ñ–¥—Ä–∞—Ö–æ–≤–∞–Ω–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        table.title = (
            f"{title}"
            f"  |  –ê–Ω–æ–º–∞–ª—ñ—ó: {anomaly_count}/{total}"
            f"  Warnings: {warning_count}/{total}"
        )

        return table
    

   