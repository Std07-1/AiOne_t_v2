# UI/ui_consumer.py
import redis.asyncio as redis
import json
import logging
import asyncio
import time
import math
from datetime import datetime
from typing import Any, Dict, List

from rich.console import Console
from rich.logging import RichHandler
from rich.live import Live
from rich.table import Table
from rich.box import ROUNDED

# –û–∫—Ä–µ–º–∞ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è Live-—Ç–∞–±–ª–∏—Ü—ñ
ui_console = Console(stderr=False)

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
ui_logger = logging.getLogger("ui_consumer")
ui_logger.setLevel(logging.INFO)
ui_logger.addHandler(RichHandler(console=Console(stderr=True), show_path=False))
ui_logger.propagate = False


class AlertAnimator:
    def __init__(self):
        self.active_alerts = {}

    def add_alert(self, symbol: str):
        self.active_alerts[symbol] = time.time()

    def should_highlight(self, symbol: str) -> bool:
        if symbol in self.active_alerts:
            elapsed = time.time() - self.active_alerts[symbol]
            if elapsed < 8.0:
                return True
            else:
                del self.active_alerts[symbol]
        return False


class UI_Consumer:
    def __init__(
        self,
        vol_z_threshold: float = 2.5,  # –ü–æ—Ä—ñ–≥ Z-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ–±—Å—è–≥—É
        low_atr_threshold: float = 0.005,  # –ü–æ—Ä—ñ–≥ ATR% –¥–ª—è –Ω–∏–∑—å–∫–æ—ó –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ
    ):
        self.vol_z_threshold = vol_z_threshold  # –ü–æ—Ä—ñ–≥ Z-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ–±—Å—è–≥—É
        self.low_atr_threshold = (
            low_atr_threshold  # –ü–æ—Ä—ñ–≥ ATR% –¥–ª—è –Ω–∏–∑—å–∫–æ—ó –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ
        )
        self.alert_animator = AlertAnimator()  # –ê–Ω—ñ–º–∞—Ç–æ—Ä –¥–ª—è –∞–ª–µ—Ä—Ç—ñ–≤
        self.last_update_time = time.time()  # –ß–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è

    def _format_price(self, price: float) -> str:
        """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ü—ñ–Ω–∏ –∑ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫–æ–º —Ç–∏—Å—è—á"""
        if price >= 1000:
            return f"{price:,.2f}"
        return f"{price:.4f}"

    def _get_rsi_color(self, rsi: float) -> str:
        """–ö–æ–ª—ñ—Ä –¥–ª—è RSI –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è"""
        if rsi < 30:
            return "green"
        elif rsi < 50:
            return "light_green"
        elif rsi < 70:
            return "yellow"
        else:
            return "red"

    def _get_atr_color(self, atr_pct: float) -> str:
        """–ö–æ–ª—ñ—Ä –¥–ª—è ATR% –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ"""
        if atr_pct < self.low_atr_threshold:
            return "red"
        elif atr_pct > 0.02:
            return "yellow"
        return ""

    def _get_calib_status_icon(self, status: str) -> str:
        """–Ü–∫–æ–Ω–∫–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å—É –∫–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è"""
        icons = {
            "completed": "‚úÖ",
            "in_progress": "üîÑ",
            "queued_urgent": "‚ö†Ô∏èüî¥",
            "queued_high": "‚ö†Ô∏èüü°",
            "queued": "‚ö†Ô∏è",
            "pending": "‚è≥",
            "error": "‚ùå",
            "timeout": "‚è±Ô∏è",
        }
        return icons.get(status, "‚ùì")

    def _get_signal_icon(self, signal: str) -> str:
        """–Ü–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–∏–ø—É —Å–∏–≥–Ω–∞–ª—É"""
        icons = {
            "ALERT": "üî¥",
            "NORMAL": "üü¢",
            "ALERT_BUY": "üü¢‚Üë",
            "ALERT_SELL": "üî¥‚Üì",
            "NONE": "‚ö™",
        }
        return icons.get(signal, "‚ùì")

    def _get_recommendation_icon(self, recommendation: str) -> str:
        """–Ü–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π Stage2"""
        icons = {
            "STRONG_BUY": "üü¢‚Üë‚Üë",
            "BUY_IN_DIPS": "üü¢‚Üë",
            "HOLD": "üü°",
            "SELL_ON_RALLIES": "üî¥‚Üì",
            "STRONG_SELL": "üî¥‚Üì‚Üì",
            "AVOID": "‚ö´",
        }
        return icons.get(recommendation, "")

    async def redis_consumer(
        self,
        redis_url: str = "redis://localhost:6379/0",
        channel: str = "asset_state_update",
        refresh_rate: float = 0.7,  # –ß–∞—Å—Ç–æ—Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        loading_delay: float = 2.0,  # –ó–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ—á–∞—Ç–∫–æ–º —Ä–µ–Ω–¥–µ—Ä–∞
        smooth_delay: float = 0.5,  # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏ –≤ —Ü–∏–∫–ª—ñ
    ):
        last_results: List[Dict[str, Any]] = []
        redis_client = redis.from_url(redis_url)
        pubsub = redis_client.pubsub()

        # –ó–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ—á–∞—Ç–∫–æ–º —Ä–µ–Ω–¥–µ—Ä–∞
        await asyncio.sleep(loading_delay)
        await pubsub.subscribe(channel)
        ui_logger.info(
            f"üîó –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ Redis, –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –Ω–∞ –∫–∞–Ω–∞–ª—ñ '{channel}'..."
        )

        with Live(
            self._build_signal_table([], loading=True),
            console=ui_console,
            refresh_per_second=refresh_rate,
            screen=False,
            transient=False,
        ) as live:
            while True:
                try:
                    message = await pubsub.get_message(
                        ignore_subscribe_messages=True, timeout=1.0
                    )
                    if message:
                        data = json.loads(message["data"])
                        if isinstance(data, list):
                            last_results = data
                            ui_logger.debug(
                                f"–û—Ç—Ä–∏–º–∞–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è {len(data)} –∞–∫—Ç–∏–≤—ñ–≤"
                            )

                    # –û–Ω–æ–≤–ª—é—î–º–æ –∞–Ω—ñ–º–∞—Ç–æ—Ä–∏ –¥–ª—è –∞–ª–µ—Ä—Ç—ñ–≤
                    for r in last_results:
                        if r.get("signal") == "ALERT":
                            self.alert_animator.add_alert(r["symbol"])

                    table = self._build_signal_table(last_results)
                    live.update(table)
                    await asyncio.sleep(smooth_delay)

                except (ConnectionError, TimeoutError) as e:
                    ui_logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è: {str(e)}")
                    await asyncio.sleep(3)
                    try:
                        await pubsub.reset()
                        await pubsub.subscribe(channel)
                        ui_logger.info("‚úÖ –ü–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ Redis")
                    except Exception as reconnect_err:
                        ui_logger.error(
                            f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: {str(reconnect_err)}"
                        )
                except Exception as e:
                    ui_logger.error(f"–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}")
                    await asyncio.sleep(1)

    def _build_signal_table(
        self,
        results: List[dict],
        loading: bool = False,
    ) -> Table:
        """–ü–æ–±—É–¥–æ–≤–∞ —Ç–∞–±–ª–∏—Ü—ñ –∑ —Å–∏–≥–Ω–∞–ª–∞–º–∏ —Ç–∞ –º–µ—Ç—Ä–∏–∫–∞–º–∏ —Å–∏—Å—Ç–µ–º–∏"""

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º–∏
        total_assets = len(results)
        alert_count = sum(1 for r in results if r.get("signal", "").startswith("ALERT"))
        calib_stats = {
            "completed": 0,
            "in_progress": 0,
            "queued": 0,
            "error": 0,
            "pending": 0,
        }

        for r in results:
            status = r.get("calib_status", "")
            if status in calib_stats:
                calib_stats[status] += 1

        last_update = datetime.fromtimestamp(self.last_update_time).strftime("%H:%M:%S")

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ñ –∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é
        title = (
            f"[bold]–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É AiOne_t[/bold] | "
            f"–ê–∫—Ç–∏–≤–∏: [green]{total_assets}[/green] | "
            f"ALERT: [red]{alert_count}[/red] | "
            f"–ö–∞–ª—ñ–±—Ä–æ–≤–∞–Ω–æ: [green]{calib_stats['completed']}[/green] | "
            f"–í —á–µ—Ä–∑—ñ: [yellow]{calib_stats['queued']+calib_stats['in_progress']}[/yellow] | "
            f"–û–Ω–æ–≤–ª–µ–Ω–æ: [cyan]{last_update}[/cyan]"
        )

        table = Table(
            title=title,
            box=ROUNDED,
            show_header=True,
            header_style="bold magenta",
            expand=True,
        )

        # –ö–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—Ü—ñ
        columns = [
            ("–°–∏–º–≤–æ–ª", "left"),
            ("–¶—ñ–Ω–∞", "right"),
            ("–û–±—Å—è–≥", "right"),
            ("ATR%", "right"),
            ("RSI", "right"),
            ("–°—Ç–∞—Ç—É—Å", "center"),
            ("–ü—Ä–∏—á–∏–Ω–∏", "left"),
            ("–°–∏–≥–Ω–∞–ª", "center"),
            ("–ö–∞–ª—ñ–±—Ä.", "center"),
            ("Stage2", "center"),
            ("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è", "left"),
            ("TP/SL", "right"),
        ]

        for header, justify in columns:
            table.add_column(header, justify=justify)

        # –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        if loading or not results:
            table.add_row("[cyan]üîÑ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö...[/]", *[""] * (len(columns) - 1))
            return table

        def priority_key(r: dict) -> tuple:
            stats = r.get("stats", {})
            reasons = set(r.get("trigger_reasons", []))
            is_alert = r.get("signal", "").startswith("ALERT")
            anomaly = stats.get("volume_z", 0.0) >= self.vol_z_threshold
            warning = (not is_alert) and bool(reasons)

            if is_alert and "volume_spike" in reasons:
                cat = 0
            elif is_alert:
                cat = 1
            elif anomaly:
                cat = 2
            elif warning:
                cat = 3
            else:
                cat = 4
            return (cat, -stats.get("volume_mean", 0.0))

        sorted_results = sorted(results, key=priority_key)

        # –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ä—è–¥–∫—ñ–≤ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∞–∫—Ç–∏–≤—É
        for asset in sorted_results:
            symbol = asset["symbol"].upper()
            stats = asset.get("stats", {})
            stage2 = asset.get("stage2_result", {})

            # –¶—ñ–Ω–∞
            current_price = stats.get("current_price", 0)

            stage2_status = asset.get("stage2_result", {}).get("status", "")
            base_style = "dim"

            if stage2_status == "completed":
                base_style = "green"
            elif stage2_status == "pending":
                base_style = "yellow"

            # –ü—ñ–¥—Å–≤—ñ—Ç–∫–∞ –¥–ª—è alert, —ñ–Ω–∞–∫—à–µ ‚Äî –±–∞–∑–æ–≤–∏–π —Å—Ç–∏–ª—å
            row_style = (
                "bold red"
                if self.alert_animator.should_highlight(symbol)
                else base_style
            )

            price_str = self._format_price(current_price)

            # –û–±—Å—è–≥
            volume = stats.get("volume_mean", 0)
            volume_z = stats.get("volume_z", 0)
            volume_str = f"{volume:,.0f}"
            if volume_z > self.vol_z_threshold:
                volume_str = f"[bold magenta]{volume_str}[/]"

            # ATR%
            atr = stats.get("atr", 0)
            atr_pct = (atr / current_price * 100) if current_price else 0
            atr_color = self._get_atr_color(atr_pct)
            atr_str = f"[{atr_color}]{atr_pct:.2f}%[/]"

            # RSI
            rsi = stats.get("rsi", 0)
            rsi_color = self._get_rsi_color(rsi)
            rsi_str = f"[{rsi_color}]{rsi:.1f}[/]"

            # –°—Ç–∞—Ç—É—Å
            status = asset.get("state", "normal")
            status_icon = "üü¢" if status == "normal" else "üî¥"
            status_str = f"{status_icon} {status}"

            # –°–∏–≥–Ω–∞–ª
            signal = asset.get("signal", "NONE")
            signal_icon = self._get_signal_icon(signal)
            signal_str = f"{signal_icon} {signal}"

            # –ö–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è
            calib_status = asset.get("calib_status", "pending")
            calib_icon = self._get_calib_status_icon(calib_status)
            calib_str = f"{calib_icon} {calib_status}"

            # Stage2
            stage2_status = asset.get("stage2_status", "pending")
            stage2_icon = "üü©" if stage2_status == "completed" else "üü®"
            stage2_str = f"{stage2_icon} {stage2_status}"

            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è
            recommendation = stage2.get("recommendation", "-")
            rec_icon = self._get_recommendation_icon(recommendation)
            rec_str = f"{rec_icon} {recommendation}"

            # TP/SL
            tp = asset.get("tp", 0)
            sl = asset.get("sl", 0)
            tp_sl_str = (
                f"TP: {self._format_price(tp)}\nSL: {self._format_price(sl)}"
                if tp and sl
                else "-"
            )

            # –ü—ñ–¥—Å–≤—ñ—Ç–∫–∞ —Ä—è–¥–∫–∞ –¥–ª—è –Ω–æ–≤–∏—Ö –∞–ª–µ—Ä—Ç—ñ–≤
            row_style = (
                "bold red" if self.alert_animator.should_highlight(symbol) else ""
            )

            tags = []
            for reason in asset.get("trigger_reasons", []):
                if reason == "volume_spike":
                    tags.append("[magenta]–°–ø–ª–µ—Å–∫ –æ–±—Å—è–≥—É[/]")
                else:
                    tags.append(f"[yellow]{reason}[/]")
            reasons = "  ".join(tags) or "-"

            table.add_row(
                symbol,
                price_str,
                volume_str,
                atr_str,
                rsi_str,
                status_str,
                reasons,  # –ü—Ä–∏—á–∏–Ω–∏
                signal_str,
                calib_str,
                stage2_str,
                rec_str,
                tp_sl_str,
                style=row_style,
            )

        return table


# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É
async def main():
    consumer = UI_Consumer()
    await consumer.redis_consumer()


if __name__ == "__main__":
    asyncio.run(main())
