"""
–û—Å–Ω–æ–≤–Ω–∏–π –º–æ–¥—É–ª—å –∑–∞–ø—É—Å–∫—É —Å–∏—Å—Ç–µ–º–∏ AiOne_t
app/main.py
"""

import time
import time
import asyncio
import logging
import os
import sys
from pathlib import Path
from dataclasses import asdict

from redis.asyncio import Redis
import subprocess
import aiohttp
import pandas as pd
from dotenv import load_dotenv
from fastapi import FastAPI, APIRouter

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –Ü–º–ø–æ—Ä—Ç–∏ –±—ñ–∑–Ω–µ—Å-–ª–æ–≥—ñ–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
from data.cache_handler import SimpleCacheHandler
from data.raw_data import OptimizedDataFetcher
from data.file_manager import FileManager
from data.ws_worker import WSWorker
from data.ram_buffer import RAMBuffer

from stage1.asset_monitoring import AssetMonitorStage1
from app.screening_producer import screening_producer, publish_full_state
from UI.ui_consumer import UI_Consumer
from stage1.optimized_asset_filter import get_filtered_assets
from stage3.trade_manager import TradeLifecycleManager
from stage2.calibration_engine import CalibrationEngine
from app.settings import settings
from rich.console import Console
from rich.logging import RichHandler
from .utils.metrics import MetricsCollector
from stage2.calibration_queue import CalibrationQueue
from app.screening_producer import AssetStateManager
from stage2.config import STAGE2_CONFIG
from stage2.calibration.calibration_config import CalibrationConfig

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑ .env
load_dotenv()

# --- –õ–æ–≥—É–≤–∞–Ω–Ω—è ---
main_logger = logging.getLogger("main")
main_logger.setLevel(logging.INFO)
main_logger.handlers.clear()
main_logger.addHandler(RichHandler(console=Console(stderr=True), show_path=False))
main_logger.propagate = False  # ‚Üê –ö—Ä–∏—Ç–∏—á–Ω–æ –≤–∞–∂–ª–∏–≤–æ!


# –°—Ç–≤–æ—Ä—é—î–º–æ FastAPI-–¥–æ–¥–∞—Ç–æ–∫
app = FastAPI()
router = APIRouter()

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π Redis-–∫–µ—à, —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
cache_handler: SimpleCacheHandler

# –î–æ–¥–∞—î–º–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –≥–ª–æ–±–∞–ª—å–Ω–æ—ó –∑–º—ñ–Ω–Ω–æ—ó calib_queue
global calib_queue

# –®–ª—è—Ö –¥–æ –∫–æ—Ä–µ–Ω—è –ø—Ä–æ–µ–∫—Ç—É
BASE_DIR = Path(__file__).resolve().parent.parent
# –ö–∞—Ç–∞–ª–æ–≥ –∑—ñ —Å—Ç–∞—Ç–∏—á–Ω–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏ (—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ WebApp)
STATIC_DIR = BASE_DIR / "static"


def launch_ui_consumer():
    """
    –ó–∞–ø—É—Å–∫ UI/ui_consumer_entry.py —É –Ω–æ–≤–æ–º—É —Ç–µ—Ä–º—ñ–Ω–∞–ª—ñ (Windows).
    """
    proj_root = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
    if sys.platform.startswith("win"):
        subprocess.Popen(
            ["start", "cmd", "/k", "python", "-m", "UI.ui_consumer_entry"],
            shell=True,
            cwd=proj_root,  # –∑–∞–ø—É—Å–∫ –∑ –∫–æ—Ä–µ–Ω—è –ø—Ä–æ–µ–∫—Ç—É, —â–æ–± UI –±–∞—á–∏–≤—Å—è —è–∫ –º–æ–¥—É–ª—å
        )
    else:
        subprocess.Popen(
            ["gnome-terminal", "--", "python3", "-m", "UI.ui_consumer_entry"],
            cwd=proj_root,
        )


def validate_settings() -> None:
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è:
      - REDIS_URL –∞–±–æ (REDIS_HOST + REDIS_PORT)
      - BINANCE_API_KEY, BINANCE_SECRET_KEY
    """
    missing = []
    if not os.getenv("REDIS_URL"):
        if not settings.redis_host:
            missing.append("REDIS_HOST")
        if not settings.redis_port:
            missing.append("REDIS_PORT")

    if not settings.binance_api_key:
        missing.append("BINANCE_API_KEY")
    if not settings.binance_secret_key:
        missing.append("BINANCE_SECRET_KEY")

    if missing:
        raise ValueError(f"–í—ñ–¥—Å—É—Ç–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è: {', '.join(missing)}")

    main_logger.info("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ ‚Äî OK.")


async def init_system() -> SimpleCacheHandler:
    """
    –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö —Å–∏—Å—Ç–µ–º:
      - –í–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
      - –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Redis
    –ü–æ–≤–µ—Ä—Ç–∞—î: —ñ–Ω—Å—Ç–∞–Ω—Å SimpleCacheHandler
    """
    validate_settings()

    redis_url = os.getenv("REDIS_URL")
    if redis_url:
        handler = SimpleCacheHandler.from_url(redis_url)
        # logger.debug("Redis —á–µ—Ä–µ–∑ URL: %s", redis_url)
    else:
        handler = SimpleCacheHandler(
            host=settings.redis_host,
            port=settings.redis_port,
        )
        # logger.debug(
        #    "Redis —á–µ—Ä–µ–∑ host/port: %s:%s",
        #    settings.redis_host,
        #    settings.redis_port,
        # )
    return handler


# --- –î–µ–±–∞–≥-—Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è RAMBuffer ---
def debug_ram_buffer(buffer, symbols, tf="1m"):
    """
    –î–µ–±–∞–∂–∏—Ç—å —Å–≤—ñ–∂—ñ—Å—Ç—å –±–∞—Ä—ñ–≤ —É RAMBuffer –¥–ª—è –∑–∞–¥–∞–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤.
    """
    now = int(time.time() * 1000)
    for sym in symbols:
        bars = buffer.get(sym, tf, 3)
        if bars:
            last_ts = bars[-1]["timestamp"]
            print(f"[{sym}] Last bar: {last_ts} | Age: {(now - last_ts) // 1000}s")
        else:
            print(f"[{sym}] No bars in RAMBuffer")


# --- –§–æ–Ω–æ–≤–∏–π —Ç–∞—Å–∫: –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è fast_symbols —á–µ—Ä–µ–∑ prefilter ---
async def periodic_prefilter_and_update(
    cache, session, thresholds, interval=600, buffer=None, fetcher=None, lookback=500
):
    """
    –ü–µ—Ä—ñ–æ–¥–∏—á–Ω–æ –≤–∏–∫–æ–Ω—É—î prefilter —Ç–∞ –æ–Ω–æ–≤–ª—é—î fast_symbols —É Redis.
    –î–æ–¥–∞—î preload —ñ—Å—Ç–æ—Ä—ñ—ó –¥–ª—è –Ω–æ–≤–∏—Ö –∞–∫—Ç–∏–≤—ñ–≤.
    """
    # –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –Ω–∞–±—ñ—Ä —Å–∏–º–≤–æ–ª—ñ–≤
    initial_symbols = set(await cache.get_fast_symbols())
    prev_symbols = initial_symbols.copy()

    # –ó–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä—à–∏–º –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º (—â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É –∑ –ø–µ—Ä–≤–∏–Ω–Ω–∏–º –ø—Ä–µ—Ñ—ñ–ª—å—Ç—Ä–æ–º)
    await asyncio.sleep(interval)  # –ß–µ–∫–∞—î–º–æ –∑–≤–∏—á–∞–π–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª (600 —Å–µ–∫)
    while True:
        try:
            main_logger.info("üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É fast_symbols —á–µ—Ä–µ–∑ prefilter...")
            fast_symbols = await get_filtered_assets(
                session=session,
                cache_handler=cache,
                thresholds=thresholds,
                dynamic=True,
            )

            if fast_symbols:
                fast_symbols = [s.lower() for s in fast_symbols]
                current_symbols = set(fast_symbols)
                await cache.set_fast_symbols(
                    fast_symbols, ttl=interval * 2
                )  # TTL 1200 —Å–µ–∫

                main_logger.info(
                    "Prefilter: %d —Å–∏–º–≤–æ–ª—ñ–≤ –∑–∞–ø–∏—Å–∞–Ω–æ —É Redis: %s",
                    len(fast_symbols),
                    fast_symbols[:5],
                )

                # --- preload –¥–ª—è –Ω–æ–≤–∏—Ö –∞–∫—Ç–∏–≤—ñ–≤ ---
                if buffer is not None and fetcher is not None:
                    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –¢–Ü–õ–¨–ö–ò –Ω–æ–≤—ñ —Å–∏–º–≤–æ–ª–∏
                    new_symbols = current_symbols - prev_symbols

                    # –î–æ–¥–∞—î–º–æ debug-–ª–æ–≥ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—ñ–≤ —Å–∏–º–≤–æ–ª—ñ–≤
                    main_logger.debug(
                        f"–°—Ç–∞–Ω —Å–∏–º–≤–æ–ª—ñ–≤: "
                        f"–ü–æ—Ç–æ—á–Ω—ñ={len(current_symbols)}, "
                        f"–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ={len(prev_symbols)}, "
                        f"–ù–æ–≤—ñ={len(new_symbols)}"
                    )
                    if new_symbols:
                        new_symbols_list = list(new_symbols)
                        main_logger.info(
                            f"Preload —ñ—Å—Ç–æ—Ä—ñ—ó –¥–ª—è {len(new_symbols_list)} –Ω–æ–≤–∏—Ö –∞–∫—Ç–∏–≤—ñ–≤"
                        )
                        await preload_1m_history(
                            fetcher, new_symbols_list, buffer, lookback=lookback
                        )
                        await preload_daily_levels(fetcher, new_symbols_list, days=30)

                # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ —Å–∏–º–≤–æ–ª–∏
                prev_symbols = current_symbols
            else:
                main_logger.warning(
                    "Prefilter –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π —Å–ø–∏—Å–æ–∫, fast_symbols –Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–æ."
                )
        except Exception as e:
            main_logger.warning("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è prefilter: %s", e)

        await asyncio.sleep(interval)  # 600 —Å–µ–∫


# --- Preload —ñ—Å—Ç–æ—Ä—ñ—ó –¥–ª—è Stage1 ---
async def preload_1m_history(fetcher, fast_symbols, buffer, lookback=50):
    """
    Preload —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö 1m-–±–∞—Ä—ñ–≤ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ —Å—Ç–∞—Ä—Ç—É Stage1.
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —â–æ lookback >= 12 (–º—ñ–Ω—ñ–º—É–º –¥–ª—è —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤ —Ç–∏–ø—É RSI/ATR).
    """
    if lookback < 12:
        main_logger.warning(
            "lookback (%d) –¥–ª—è 1m-–±–∞—Ä—ñ–≤ –∑–∞–Ω–∞–¥—Ç–æ –º–∞–ª–∏–π. –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –º—ñ–Ω—ñ–º—É–º 12.",
            lookback,
        )
        lookback = 12

    main_logger.info(
        "Preload 1m: –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ %d 1m-–±–∞—Ä—ñ–≤ –¥–ª—è %d —Å–∏–º–≤–æ–ª—ñ–≤‚Ä¶",
        lookback,
        len(fast_symbols),
    )
    hist_data = await fetcher.get_data_batch(
        fast_symbols,
        interval="1m",
        limit=lookback,
        min_candles=lookback,
        show_progress=True,
        read_cache=False,
        write_cache=True,
    )

    # –î–æ–¥–∞—î–º–æ –±–∞—Ä–∏ –≤ RAMBuffer
    for sym, df in hist_data.items():
        for bar in df.to_dict("records"):
            ts = bar["timestamp"]
            if isinstance(ts, pd.Timestamp):
                bar["timestamp"] = int(ts.value // 1_000_000)
            else:
                bar["timestamp"] = int(ts)
            buffer.add(sym.lower(), "1m", bar)
    main_logger.info(
        "Preload 1m –∑–∞–≤–µ—Ä—à–µ–Ω–æ: —ñ—Å—Ç–æ—Ä—ñ—è –¥–æ–¥–∞–Ω–∞ –≤ RAMBuffer –¥–ª—è %d —Å–∏–º–≤–æ–ª—ñ–≤.",
        len(hist_data),
    )
    return hist_data


# --- Preload –¥–µ–Ω–Ω–∏—Ö –±–∞—Ä—ñ–≤ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö —Ä—ñ–≤–Ω—ñ–≤ ---
async def preload_daily_levels(fetcher, fast_symbols, days=30):
    """
    Preload –¥–µ–Ω–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º—É –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö —Ä—ñ–≤–Ω—ñ–≤ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏/–æ–ø–æ—Ä—É.
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —â–æ days >= 30.
    """
    if days < 30:
        main_logger.warning(
            "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ (%d) –¥–ª—è –¥–µ–Ω–Ω–∏—Ö –±–∞—Ä—ñ–≤ –∑–∞–Ω–∞–¥—Ç–æ –º–∞–ª–∞. –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –º—ñ–Ω—ñ–º—É–º 30.",
            days,
        )
        days = 30

    main_logger.info(
        "Preload Daily: –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ %d –¥–µ–Ω–Ω–∏—Ö —Å–≤—ñ—á–æ–∫ –¥–ª—è %d —Å–∏–º–≤–æ–ª—ñ–≤‚Ä¶",
        days,
        len(fast_symbols),
    )
    daily_data = await fetcher.get_data_batch(
        fast_symbols,
        interval="1d",
        limit=days,
        min_candles=days,
        show_progress=False,
        read_cache=False,
        write_cache=False,
    )
    main_logger.info("Preload Daily –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è %d —Å–∏–º–≤–æ–ª—ñ–≤.", len(daily_data))
    return daily_data


# --- HealthCheck –¥–ª—è RAMBuffer ---
async def ram_buffer_healthcheck(
    buffer, symbols, max_age=90, interval=30, ws_worker=None, tf="1m"
):
    """
    –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∂–∏–≤—É—á–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö —É RAMBuffer.
    –Ø–∫—â–æ –¥–∞–Ω—ñ –ø–æ —Å–∏–º–≤–æ–ª—É –Ω–µ –æ–Ω–æ–≤–ª—é–≤–∞–ª–∏—Å—å >max_age —Å–µ–∫ ‚Äî –ª–æ–≥ WARN —ñ –æ–ø—Ü—ñ–π–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ WSWorker.
    """
    while True:
        now = int(time.time() * 1000)
        dead = []
        for sym in symbols:
            bars = buffer.get(sym, tf, 1)
            if not bars or (now - bars[-1]["timestamp"]) > max_age * 1000:
                dead.append(sym)
        if dead:
            main_logger.warning("[HealthCheck] Symbols stalled: %s", dead)
            if ws_worker is not None:
                main_logger.warning(
                    "[HealthCheck] Restarting WSWorker —á–µ—Ä–µ–∑ –∑–∞—Å—Ç—ñ–π —Å–∏–º–≤–æ–ª—ñ–≤."
                )
                await ws_worker.stop()
                asyncio.create_task(ws_worker.consume())
        else:
            main_logger.debug(
                "[HealthCheck] –í—Å—ñ —Å–∏–º–≤–æ–ª–∏ –∞–∫—Ç–∏–≤–Ω—ñ (–ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ %d).", len(symbols)
            )
        await asyncio.sleep(interval)


async def trade_manager_updater(
    trade_manager: TradeLifecycleManager,
    buffer: RAMBuffer,
    monitor: AssetMonitorStage1,
    timeframe: str = "1m",
    lookback: int = 20,
    interval_sec: int = 30,
):
    """
    –§–æ–Ω–æ–≤–∏–π —Ç–∞—Å–∫: –æ–Ω–æ–≤–ª—é—î –∞–∫—Ç–∏–≤–Ω—ñ —É–≥–æ–¥–∏,
    –±–µ—Ä–µ ATR/RSI/VOLUME —ñ–∑ Stage1.stats, –∞ –Ω–µ –∑ —Å–∏—Ä–∏—Ö –±–∞—Ä—ñ–≤,
    —ñ –≤–∏–≤–æ–¥–∏—Ç—å –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏ active/closed.
    """
    while True:
        # 1) –û–Ω–æ–≤–ª—é—î–º–æ –≤—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ —É–≥–æ–¥–∏
        active = await trade_manager.get_active_trades()
        for tr in active:
            sym = tr["symbol"]
            bars = buffer.get(sym, timeframe, lookback)
            if not bars or len(bars) < lookback:
                continue

            df = pd.DataFrame(bars)
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ AssetMonitorStage1 –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è stats
            stats = (
                await monitor.get_current_stats(sym, df)
                if hasattr(monitor, "get_current_stats")
                else {}
            )
            market_data = {
                "price": stats.get("current_price", 0),
                "atr": stats.get("atr", 0),
                "rsi": stats.get("rsi", 0),
                "volume": stats.get("volume_mean", 0),
                "context_break": stats.get("context_break", False),
            }
            await trade_manager.update_trade(tr["id"], market_data)

        # 2) –ü—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–∏–≤–æ–¥–∏–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        active = await trade_manager.get_active_trades()
        closed = await trade_manager.get_closed_trades()
        main_logger.info(
            f"üü¢ Active trades: {len(active)}    üî¥ Closed trades: {len(closed)}"
        )

        await asyncio.sleep(interval_sec)


async def run_pipeline() -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∏–π pipeline:
    1. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ —Ç–∞ –∫–µ—à—É
    2. Pre-filter –∞–∫—Ç–∏–≤—ñ–≤
    3. –ó–∞–ø—É—Å–∫ ws_worker + RAMBuffer –¥–ª—è 1m –¥–∞–Ω–∏—Ö + healthcheck
    4. –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–Ω—ñ–Ω–≥—É (screening_producer) –¥–ª—è stage1
    5. (–û–ø—Ü—ñ–π–Ω–æ) –∑–∞–ø—É—Å–∫ UI/live-stats/fastapi
    """

    # 1. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
    cache = await init_system()  # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫–µ—à
    file_manager = FileManager()  # –§–∞–π–ª–æ–≤–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
    buffer = RAMBuffer(max_bars=120)  # RAMBuffer –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó
    calibration_config = CalibrationConfig()  # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∫–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è
    stage2_config = STAGE2_CONFIG  # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è Stage2

    # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Redis
    redis_conn = Redis(
        host=settings.redis_host,
        port=settings.redis_port,
        decode_responses=True,
        encoding="utf-8",
    )

    launch_ui_consumer()  # –ó–∞–ø—É—Å–∫–∞—î–º–æ UI-—Å–ø–æ–∂–∏–≤–∞—á–∞ —É –Ω–æ–≤–æ–º—É —Ç–µ—Ä–º—ñ–Ω–∞–ª—ñ
    trade_manager = TradeLifecycleManager(log_file="trade_log.jsonl")  # –ú–µ–Ω–µ–¥–∂–µ—Ä —É–≥–æ–¥
    file_manager = FileManager()  # –§–∞–π–ª–æ–≤–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä
    buffer = RAMBuffer(max_bars=500)  # RAMBuffer –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó
    thresholds = {
        "MIN_QUOTE_VOLUME": 1_000_000.0,  # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –æ–±'—î–º —Ç–æ—Ä–≥—ñ–≤–ª—ñ
        "MIN_PRICE_CHANGE": 3.0,  # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–∞ —Ü—ñ–Ω–∏
        "MIN_OPEN_INTEREST": 500_000.0,  # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –≤—ñ–¥–∫—Ä–∏—Ç–∏–π —ñ–Ω—Ç–µ—Ä–µ—Å
        "MAX_SYMBOLS": 350,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–∏–º–≤–æ–ª—ñ–≤
    }

    # 2. –°—Ç–≤–æ—Ä—é—î–º–æ –¥–æ–≤–≥–æ–∂–∏–≤—É ClientSession
    session = aiohttp.ClientSession()
    try:
        fetcher = OptimizedDataFetcher(cache_handler=cache, session=session)

        # ===== –ù–û–í–ê –õ–û–ì–Ü–ö–ê –í–ò–ë–û–†–£ –†–ï–ñ–ò–ú–£ =====
        use_manual_list = (
            True  # –ó–º—ñ–Ω–∏—Ç–∏ –Ω–∞ False –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É, True - –¥–ª—è —Ä—É—á–Ω–æ–≥–æ
        )

        if use_manual_list:
            # –†—É—á–Ω–∏–π —Ä–µ–∂–∏–º: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫
            fast_symbols = [
                "btcusdt",
                "ethusdt",
                "tonusdt",
                "adausdt",
            ]
            await cache.set_fast_symbols(fast_symbols, ttl=3600)  # TTL 1 –≥–æ–¥–∏–Ω–∞
            main_logger.info(
                f"[Main] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä—É—á–Ω–∏–π —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª—ñ–≤: {fast_symbols}"
            )
        else:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π —Ä–µ–∂–∏–º: –≤–∏–∫–æ–Ω—É—î–º–æ –ø–µ—Ä–≤–∏–Ω–Ω–∏–π –ø—Ä–µ—Ñ—ñ–ª—å—Ç—Ä
            main_logger.info("[Main] –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä–≤–∏–Ω–Ω–∏–π –ø—Ä–µ—Ñ—ñ–ª—å—Ç—Ä...")

            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤–∏–π –º–µ—Ö–∞–Ω—ñ–∑–º –≤—ñ–¥–±–æ—Ä—É –∞–∫—Ç–∏–≤—ñ–≤
            fast_symbols = await get_filtered_assets(
                session=session,
                cache_handler=cache,
                min_quote_vol=1_000_000.0,
                min_price_change=3.0,
                min_oi=500_000.0,
                min_depth=50_000.0,
                min_atr=0.5,
                max_symbols=350,
                dynamic=False,  # –§—ñ–∫—Å–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–µ—Ä–≤–∏–Ω–Ω–æ–≥–æ –ø—Ä–µ—Ñ—ñ–ª—å—Ç—Ä—É
            )

            fast_symbols = [s.lower() for s in fast_symbols]
            await cache.set_fast_symbols(fast_symbols, ttl=600)  # TTL 10 —Ö–≤–∏–ª–∏–Ω
            # –õ–æ–≥—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–∏–º–≤–æ–ª—ñ–≤
            main_logger.info(
                f"[Main] –ü–µ—Ä–≤–∏–Ω–Ω–∏–π –ø—Ä–µ—Ñ—ñ–ª—å—Ç—Ä: {len(fast_symbols)} —Å–∏–º–≤–æ–ª—ñ–≤"
            )

        # –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç—É–∞–ª—å–Ω–∏–π —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª—ñ–≤
        fast_symbols = await cache.get_fast_symbols()
        if not fast_symbols:
            main_logger.error("[Main] –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª—ñ–≤. –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è.")
            return

        main_logger.info(
            f"[Main] –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª—ñ–≤: {fast_symbols} (–∫—ñ–ª—å–∫—ñ—Å—Ç—å: {len(fast_symbols)})"
        )

        # Preload —ñ—Å—Ç–æ—Ä—ñ—ó
        await preload_1m_history(
            fetcher, fast_symbols, buffer, lookback=500
        )  # 500 –±–∞—Ä—ñ–≤ (~8.3 –≥–æ–¥–∏–Ω–∏)
        daily_data = await preload_daily_levels(fetcher, fast_symbols, days=30)

        # --- CalibrationEngine ---
        main_logger.info("[Main] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ CalibrationEngine...")
        calib_engine = CalibrationEngine(
            config=calibration_config,
            stage2_config=stage2_config,
            ram_buffer=buffer,  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ RAMBuffer –¥–ª—è —ñ—Å—Ç–æ—Ä—ñ—ó
            fetcher=fetcher,  # –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π —Ñ–µ—Ç—á–µ—Ä
            redis_client=redis_conn,  # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Redis
            interval="1m",  # –¢–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
            min_bars=350,  # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–∞—Ä—ñ–≤ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
            metric="profit_factor",  # –ú–µ—Ç—Ä–∏–∫–∞ –¥–ª—è –∫–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è
        )

        # --- CalibrationQueue ---
        main_logger.info("[Main] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ CalibrationQueue...")

        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ AssetStateManager –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ—ó —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑—ñ —Å—Ç–∞–Ω–æ–º –∞–∫—Ç–∏–≤—ñ–≤
        assets_current = [s.lower() for s in fast_symbols]
        state_manager = AssetStateManager(assets_current)
        calib_queue = CalibrationQueue(
            config=CalibrationConfig(
                n_trials=25,  # –©–µ –º–µ–Ω—à–µ —Å–ø—Ä–æ–± –¥–ª—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ
                lookback_days=14,  # 7 –¥–Ω—ñ–≤ —ñ—Å—Ç–æ—Ä—ñ—ó
                max_concurrent=15,  # –ë—ñ–ª—å—à–µ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–∏—Ö –∑–∞–¥–∞—á
            ),
            cache=cache,
            calib_engine=calib_engine,
            state_manager=state_manager,
        )
        await calib_queue.start_workers(n_workers=20)  # –ó–±—ñ–ª—å—à—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–æ—Ä–∫–µ—Ä—ñ–≤

        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è AssetMonitorStage1
        main_logger.info("[Main] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ AssetMonitorStage1...")
        monitor = AssetMonitorStage1(
            cache_handler=cache,
            vol_z_threshold=2.5,
            rsi_overbought=70,
            rsi_oversold=30,
            min_reasons_for_alert=2,
        )
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω—ñ —Ä—ñ–≤–Ω—ñ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏/–æ–ø–æ—Ä—É
        monitor.set_global_levels(daily_data)

        # --- –í–∏–∫–æ–Ω—É—î–º–æ —Ñ–æ–Ω-–≤–æ—Ä–∫–µ—Ä–∏ ---
        ws_task = asyncio.create_task(WSWorker(fast_symbols, buffer, cache).consume())
        health_task = asyncio.create_task(
            ram_buffer_healthcheck(buffer, fast_symbols, ws_worker=None)
        )

        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ UI-—Å–ø–æ–∂–∏–≤–∞—á–∞
        main_logger.info("[Main] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ UI-—Å–ø–æ–∂–∏–≤–∞—á–∞...")
        ui = UI_Consumer()

        # –ó–∞–ø—É—Å–∫–∞—î–º–æ Screening Producer
        main_logger.info("[Main] –ó–∞–ø—É—Å–∫–∞—î–º–æ Screening Producer...")
        prod = asyncio.create_task(
            screening_producer(
                monitor,
                buffer,
                cache,
                fast_symbols,
                redis_conn,
                fetcher,
                trade_manager=trade_manager,
                timeframe="1m",
                lookback=50,
                interval_sec=30,
                calib_engine=calib_engine,
                calib_queue=calib_queue,
                # –î–æ–¥–∞—î–º–æ state_manager –¥–ª—è –ø–æ–≤–Ω–æ—ó —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
                state_manager=state_manager,
            )
        )

        # –ü—É–±–ª—ñ–∫—É—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω –≤ Redis
        main_logger.info("[Main] –ü—É–±–ª—ñ–∫—É—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω –≤ Redis...")
        await publish_full_state(state_manager, cache, redis_conn)

        # –ó–∞–ø—É—Å–∫–∞—î–º–æ TradeLifecycleManager –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —É–≥–æ–¥–∞–º–∏
        main_logger.info("[Main] –ó–∞–ø—É—Å–∫–∞—î–º–æ TradeLifecycleManager...")
        trade_update_task = asyncio.create_task(
            trade_manager_updater(
                trade_manager,
                buffer,
                monitor,
            )
        )

        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ
        prefilter_task = None
        if not use_manual_list:
            prefilter_task = asyncio.create_task(
                periodic_prefilter_and_update(
                    cache,
                    session,
                    thresholds,
                    interval=600,
                    buffer=buffer,
                    fetcher=fetcher,
                )
            )

        # –ó–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –∑–±–æ—Ä—É
        tasks_to_run = [
            ws_task,
            health_task,
            prod,
            trade_update_task,
        ]

        if prefilter_task:
            tasks_to_run.append(prefilter_task)

        await asyncio.gather(*tasks_to_run)
    finally:
        await session.close()


@router.get("/metrics")
async def metrics_endpoint():
    # calib_queue –º–∞—î –±—É—Ç–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π –∞–±–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–∏–π
    metrics = calib_queue.get_metrics()
    output = []
    # –õ—ñ—á–∏–ª—å–Ω–∏–∫–∏
    for key, value in metrics.get("counters", {}).items():
        output.append(f"{key} {value}")
    # –ì—ñ—Å—Ç–æ–≥—Ä–∞–º–∏
    for key, data in metrics.get("histograms", {}).items():
        output.append(f"{key}_count {data.get('count', 0)}")
        output.append(f"{key}_sum {data.get('sum', 0)}")
        output.append(f"{key}_avg {data.get('avg', 0)}")
    # –î–∞—Ç—á–∏–∫–∏
    for key, value in metrics.get("gauges", {}).items():
        output.append(f"{key} {value}")
    output.append(f"system_uptime {metrics.get('uptime', 0)}")
    return "\n".join(output)


# –î–æ–¥–∞—î–º–æ —Ä–æ—É—Ç–µ—Ä –¥–æ FastAPI
app.include_router(router)


if __name__ == "__main__":
    try:
        asyncio.run(run_pipeline())
    except Exception as e:
        main_logger.error("–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: %s", e, exc_info=True)
        sys.exit(1)
